{
  "address": "0x619beC3E00849e48112B162fDa1A6b1f8BC9d18F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pair",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "take_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "give_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "FeeTake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pair",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pay_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "buy_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "LogBump",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "LogBuyEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LogDelete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LogInsert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "lol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "name": "LogInt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LogItemUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pair",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pay_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "buy_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "LogKill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pair",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pay_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "buy_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "LogMake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogMatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "LogMatchingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min_amount",
          "type": "uint256"
        }
      ],
      "name": "LogMinSell",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "foo",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "bar",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "fax",
          "type": "bytes"
        }
      ],
      "name": "LogNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LogSortedOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pair",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "take_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "give_amt",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "LogTake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buy_gem",
          "type": "address"
        }
      ],
      "name": "LogTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LogUnsortedOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "OfferDeleted",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AqueductAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AqueductDistributionLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_best",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_dust",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_near",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "next",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prev",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delb",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_span",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "addition",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id_",
          "type": "bytes32"
        }
      ],
      "name": "bump",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "max_fill_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAllAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fill_amt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "del_rank",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "dustId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "sell_gem",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        }
      ],
      "name": "getBestOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBetterOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        }
      ],
      "name": "getBuyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fill_amt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFirstUnsortedOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        }
      ],
      "name": "getMinSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getNextUnsortedOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "sell_gem",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        }
      ],
      "name": "getOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        }
      ],
      "name": "getPayAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fill_amt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getWorseOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "RBCNDist",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isOfferSorted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "kill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "last_offer_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "pay_amt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "buy_amt",
          "type": "uint128"
        }
      ],
      "name": "make",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "matchingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        }
      ],
      "name": "offer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matching",
          "type": "bool"
        }
      ],
      "name": "offer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        }
      ],
      "name": "offer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buy_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "remove",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pay_amt",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "buy_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min_fill_amount",
          "type": "uint256"
        }
      ],
      "name": "sellAllAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fill_amt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_Aqueduct",
          "type": "address"
        }
      ],
      "name": "setAqueductAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "live",
          "type": "bool"
        }
      ],
      "name": "setAqueductDistributionLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "buyEnabled_",
          "type": "bool"
        }
      ],
      "name": "setBuyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "setFeeBPS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "matchingEnabled_",
          "type": "bool"
        }
      ],
      "name": "setMatchingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "pay_gem",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dust",
          "type": "uint256"
        }
      ],
      "name": "setMinSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "maxTakeAmount",
          "type": "uint128"
        }
      ],
      "name": "take",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa465b03505d203c8486a3ed75968932cd31d6c3d2c0232ca44d7afc92e2d01bc",
  "receipt": {
    "to": null,
    "from": "0x75E7aBED3406df8f2fD4E036Cbb5f6830bce525d",
    "contractAddress": "0x619beC3E00849e48112B162fDa1A6b1f8BC9d18F",
    "transactionIndex": 0,
    "gasUsed": "7904093",
    "logsBloom": "0x
    "blockHash": "0xc39c390d47f1696567ae93b92cac0768bf2469a4eb799c6c86d35fa5ec2e587a",
    "transactionHash": "0xa465b03505d203c8486a3ed75968932cd31d6c3d2c0232ca44d7afc92e2d01bc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 226443,
        "transactionHash": "0xa465b03505d203c8486a3ed75968932cd31d6c3d2c0232ca44d7afc92e2d01bc",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000075e7abed3406df8f2fd4e036cbb5f6830bce525d",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xc39c390d47f1696567ae93b92cac0768bf2469a4eb799c6c86d35fa5ec2e587a"
      }
    ],
    "blockNumber": 226443,
    "cumulativeGasUsed": "7904093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "090df84122bf71f4511b6e62d5efa00c",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16-develop.2020.12.10+ovm+commit.25adf37d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"FeeTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogBump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogBuyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogInsert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogItemUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogMake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogMatchingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"LogMinSell\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogSortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogUnsortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OfferDeleted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"AqueductAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AqueductDistributionLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_best\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_near\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_span\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addition\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id_\",\"type\":\"bytes32\"}],\"name\":\"bump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_fill_amount\",\"type\":\"uint256\"}],\"name\":\"buyAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"del_rank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dustId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"sell_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getBestOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetterOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstUnsortedOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"}],\"name\":\"getMinSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextUnsortedOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"sell_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"}],\"name\":\"getPayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorseOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"RBCNDist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOfferSorted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_offer_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"}],\"name\":\"make\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matching\",\"type\":\"bool\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"remove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min_fill_amount\",\"type\":\"uint256\"}],\"name\":\"sellAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Aqueduct\",\"type\":\"address\"}],\"name\":\"setAqueductAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"setAqueductDistributionLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buyEnabled_\",\"type\":\"bool\"}],\"name\":\"setBuyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeBPS\",\"type\":\"uint256\"}],\"name\":\"setFeeBPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"matchingEnabled_\",\"type\":\"bool\"}],\"name\":\"setMatchingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"maxTakeAmount\",\"type\":\"uint128\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits the key trading functionality from SimpleMarket\",\"methods\":{}},\"userdoc\":{\"methods\":{\"bump(bytes32)\":{\"notice\":\"Below are the main public entrypoints\"}},\"notice\":\"The core Rubicon Market smart contractThis contract is based on the original open-source work done by OasisDEX under the Apache License 2.0\"}},\"settings\":{\"compilationTarget\":{\"contracts/RubiconMarket.sol\":\"RubiconMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RubiconMarket.sol\":{\"content\":\"/// @title RubiconMarket.sol\\n/// @notice Please see the repository for this code at https://github.com/RubiconDeFi/rubicon_protocol\\n\\npragma solidity 0.5.16;\\n\\n/// @notice DSAuth events for authentication schema\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\n/// @notice DSAuth library for setting owner of the contract\\n/// @dev Provides the auth modifier for authenticated function calls\\ncontract DSAuth is DSAuthEvents {\\n    address public owner;\\n\\n    function setOwner(address owner_) external auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\n/// @notice DSMath library for safe math without integer overflow/underflow\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\\n/// @notice ERC-20 interface as derived from EIP-20\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address guy) public view returns (uint256);\\n\\n    function allowance(address src, address guy) public view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) public returns (bool);\\n\\n    function transfer(address dst, uint256 wad) public returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool);\\n}\\n\\n/// @notice Events contract for logging trade activity on Rubicon Market\\n/// @dev Provides the key event logs that are used in all core functionality of exchanging on the Rubicon Market\\ncontract EventfulMarket {\\n    event LogItemUpdate(uint256 id);\\n    event LogTrade(\\n        uint256 pay_amt,\\n        address indexed pay_gem,\\n        uint256 buy_amt,\\n        address indexed buy_gem\\n    );\\n\\n    event LogMake(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogBump(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogKill(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogInt(string lol, uint256 input);\\n\\n    event FeeTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint256 feeAmt,\\n        address feeTo,\\n        uint64 timestamp\\n    );\\n\\n    event OfferDeleted(uint256 id);\\n}\\n\\n/// @notice Core trading logic for ERC-20 pairs, an orderbook, and transacting of tokens\\n/// @dev This contract holds the core ERC-20 / ERC-20 offer, buy, and cancel logic\\ncontract SimpleMarket is EventfulMarket, DSMath {\\n    uint256 public last_offer_id;\\n\\n    /// @dev The mapping that makes up the core orderbook of the exchange\\n    mapping(uint256 => OfferInfo) public offers;\\n\\n    mapping(address => bool) internal whitelist;\\n\\n    bool locked;\\n\\n    /// @notice This parameter provides the ability for a protocol fee on taker trades\\n    /// @dev This parameter is in basis points\\n    uint256 internal feeBPS;\\n\\n    /// @notice This parameter provides the address to which fees are sent\\n    address internal feeTo;\\n\\n    struct OfferInfo {\\n        uint256 pay_amt;\\n        ERC20 pay_gem;\\n        uint256 buy_amt;\\n        ERC20 buy_gem;\\n        address owner;\\n        uint64 timestamp;\\n    }\\n\\n    /// @notice Modifier that insures an order exists and is properly in the orderbook\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        _;\\n    }\\n\\n    /// @notice Modifier that checks the user to make sure they own the offer and its valid before they attempt to cancel it\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require(getOwner(id) == msg.sender);\\n        _;\\n    }\\n\\n    modifier can_offer {\\n        _;\\n    }\\n\\n    modifier synchronized {\\n        require(!locked);\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyWhitelisted(ERC20 pay_gem, ERC20 buy_gem) {\\n        require(isWhitelisted(address(pay_gem)));\\n        require(isWhitelisted(address(buy_gem)));\\n        _;\\n    }\\n\\n    function isActive(uint256 id) public view returns (bool active) {\\n        return offers[id].timestamp > 0;\\n    }\\n\\n    function getOwner(uint256 id) public view returns (address owner) {\\n        return offers[id].owner;\\n    }\\n\\n    function getOffer(uint256 id)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            ERC20,\\n            uint256,\\n            ERC20\\n        )\\n    {\\n        OfferInfo memory offer = offers[id];\\n        return (offer.pay_amt, offer.pay_gem, offer.buy_amt, offer.buy_gem);\\n    }\\n\\n    /// @notice Below are the main public entrypoints\\n\\n    function bump(bytes32 id_) external can_buy(uint256(id_)) {\\n        uint256 id = uint256(id_);\\n        emit LogBump(\\n            id_,\\n            keccak256(abi.encodePacked(offers[id].pay_gem, offers[id].buy_gem)),\\n            offers[id].owner,\\n            offers[id].pay_gem,\\n            offers[id].buy_gem,\\n            uint128(offers[id].pay_amt),\\n            uint128(offers[id].buy_amt),\\n            offers[id].timestamp\\n        );\\n    }\\n\\n    /// @notice Accept a given `quantity` of an offer. Transfers funds from caller/taker to offer maker, and from market to caller/taker.\\n    /// @notice The fee for taker trades is paid in this function.\\n    function buy(uint256 id, uint256 quantity)\\n        public\\n        can_buy(id)\\n        synchronized\\n        returns (bool)\\n    {\\n        OfferInfo memory offer = offers[id];\\n        uint256 spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\\n\\n        require(uint128(spend) == spend, \\\"spend is not an int\\\");\\n        require(uint128(quantity) == quantity, \\\"quantity is not an int\\\");\\n\\n        ///@dev For backwards semantic compatibility.\\n        if (\\n            quantity == 0 ||\\n            spend == 0 ||\\n            quantity > offer.pay_amt ||\\n            spend > offer.buy_amt\\n        ) {\\n            return false;\\n        }\\n\\n        ///@dev Below is the basis point math logic for calculating the fee on a given trade\\n        ///@notice The fee is paid in the asset that the caller (taker) is market buying or selling with\\n        uint256 fee = mul(spend, feeBPS) / 10000;\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, feeTo, fee),\\n            \\\"Insufficient funds to cover fee\\\"\\n        );\\n\\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, offer.owner, spend),\\n            \\\"offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) failed - check that you can pay the fee\\\"\\n        );\\n        require(\\n            offer.pay_gem.transfer(msg.sender, quantity),\\n            \\\"offer.pay_gem.transfer(msg.sender, quantity) failed\\\"\\n        );\\n\\n        emit LogItemUpdate(id);\\n        emit LogTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            uint64(now)\\n        );\\n        emit FeeTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            fee,\\n            feeTo,\\n            uint64(now)\\n        );\\n        emit LogTrade(\\n            quantity,\\n            address(offer.pay_gem),\\n            spend,\\n            address(offer.buy_gem)\\n        );\\n\\n        if (offers[id].pay_amt == 0) {\\n            delete offers[id];\\n            emit OfferDeleted(id);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Allows the caller to cancel the offer if it is their own.\\n    /// @notice This function refunds the offer to the maker.\\n    function cancel(uint256 id)\\n        public\\n        can_cancel(id)\\n        synchronized\\n        returns (bool success)\\n    {\\n        /// @dev This is a read-only offer. Modify an offer by directly accessing offers[id]\\n        OfferInfo memory offer = offers[id];\\n        delete offers[id];\\n\\n        require(offer.pay_gem.transfer(offer.owner, offer.pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogKill(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            uint128(offer.pay_amt),\\n            uint128(offer.buy_amt),\\n            uint64(now)\\n        );\\n\\n        success = true;\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) external returns (bytes32 id) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    /// @notice Key function to make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt,\\n        ERC20 pay_gem,\\n        uint256 buy_amt,\\n        ERC20 buy_gem\\n    )\\n        public\\n        can_offer\\n        synchronized\\n        onlyWhitelisted(pay_gem, buy_gem)\\n        returns (uint256 id)\\n    {\\n        require(uint128(pay_amt) == pay_amt);\\n        require(uint128(buy_amt) == buy_amt);\\n        require(pay_amt > 0);\\n        require(pay_gem != ERC20(0x0));\\n        require(buy_amt > 0);\\n        require(buy_gem != ERC20(0x0));\\n        require(pay_gem != buy_gem);\\n\\n        OfferInfo memory info;\\n        info.pay_amt = pay_amt;\\n        info.pay_gem = pay_gem;\\n        info.buy_amt = buy_amt;\\n        info.buy_gem = buy_gem;\\n        info.owner = msg.sender;\\n        info.timestamp = uint64(now);\\n        id = _next_id();\\n        offers[id] = info;\\n\\n        require(pay_gem.transferFrom(msg.sender, address(this), pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogMake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(pay_gem, buy_gem)),\\n            msg.sender,\\n            pay_gem,\\n            buy_gem,\\n            uint128(pay_amt),\\n            uint128(buy_amt),\\n            uint64(now)\\n        );\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) external {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function _next_id() internal returns (uint256) {\\n        last_offer_id++;\\n        return last_offer_id;\\n    }\\n\\n    // Fee logic\\n    function getFeeBPS() internal view returns (uint256) {\\n        return feeBPS;\\n    }\\n\\n    function isWhitelisted(address target) internal view returns (bool) {\\n        return whitelist[target];\\n    }\\n}\\n\\n/// @notice Expiring market is a Simple Market with a market lifetime.\\n/// @dev When the close_time has been reached, offers can only be cancelled (offer and buy will throw).\\ncontract ExpiringMarket is DSAuth, SimpleMarket {\\n    bool public stopped;\\n\\n    /// @dev After close_time has been reached, no new offers are allowed.\\n    modifier can_offer {\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, no new buys are allowed.\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, anyone can cancel an offer.\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require((msg.sender == getOwner(id)) || isClosed());\\n        _;\\n    }\\n\\n    function isClosed() public pure returns (bool closed) {\\n        return false;\\n    }\\n\\n    function getTime() public view returns (uint64) {\\n        return uint64(now);\\n    }\\n\\n    function stop() external auth {\\n        stopped = true;\\n    }\\n}\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4 indexed sig,\\n        address indexed guy,\\n        bytes32 indexed foo,\\n        bytes32 indexed bar,\\n        uint256 wad,\\n        bytes fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n        uint256 wad;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n            wad := callvalue\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\\n\\n        _;\\n    }\\n}\\n\\ncontract MatchingEvents {\\n    event LogBuyEnabled(bool isEnabled);\\n    event LogMinSell(address pay_gem, uint256 min_amount);\\n    event LogMatchingEnabled(bool isEnabled);\\n    event LogUnsortedOffer(uint256 id);\\n    event LogSortedOffer(uint256 id);\\n    event LogInsert(address keeper, uint256 id);\\n    event LogDelete(address keeper, uint256 id);\\n    event LogMatch(uint256 id, uint256 amount);\\n}\\n\\n/// @notice The core Rubicon Market smart contract\\n/// @notice This contract is based on the original open-source work done by OasisDEX under the Apache License 2.0\\n/// @dev This contract inherits the key trading functionality from SimpleMarket\\ncontract RubiconMarket is MatchingEvents, ExpiringMarket, DSNote {\\n    bool public buyEnabled = true; //buy enabled\\n    bool public matchingEnabled = true; //true: enable matching,\\n    //false: revert to expiring market\\n    /// @dev Below is variable to allow for a proxy-friendly constructor\\n    bool public initialized;\\n    \\n    bool public AqueductDistributionLive;\\n    address public AqueductAddress;\\n\\n    struct sortInfo {\\n        uint256 next; //points to id of next higher offer\\n        uint256 prev; //points to id of previous lower offer\\n        uint256 delb; //the blocknumber where this entry was marked for delete\\n    }\\n    mapping(uint256 => sortInfo) public _rank; //doubly linked lists of sorted offer ids\\n    mapping(address => mapping(address => uint256)) public _best; //id of the highest offer for a token pair\\n    mapping(address => mapping(address => uint256)) public _span; //number of offers stored for token pair in sorted orderbook\\n    mapping(address => uint256) public _dust; //minimum sell amount for a token to avoid dust offers\\n    mapping(uint256 => uint256) public _near; //next unsorted offer id\\n    uint256 _head; //first unsorted offer id\\n    uint256 public dustId; // id of the latest offer marked as dust\\n\\n    function initialize(bool RBCNDist, address _feeTo) public {\\n        // require(msg.sender == ___deployer____);\\n        require(!initialized, \\\"contract is already initialized\\\");\\n        AqueductDistributionLive = RBCNDist;\\n        feeTo = _feeTo;\\n\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n\\n        /// @notice The starting fee on taker trades in basis points\\n        feeBPS = 20;\\n        initialized = true;\\n    }\\n\\n    // After close, anyone can cancel an offer\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id), \\\"Offer was deleted or taken, or never existed.\\\");\\n        require(\\n            isClosed() || msg.sender == getOwner(id) || id == dustId,\\n            \\\"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---- Public entrypoints ---- //\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) public returns (bytes32) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) public {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    //\\n    // If matching is enabled:\\n    //     * creates new offer without putting it in\\n    //       the sorted list.\\n    //     * available to authorized contracts only!\\n    //     * keepers should call insert(id,pos)\\n    //       to put offer in the sorted list.\\n    //\\n    // If matching is disabled:\\n    //     * calls expiring market's offer().\\n    //     * available to everyone without authorization.\\n    //     * no sorting is done.\\n    //\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //taker (ask) buy how much\\n        ERC20 buy_gem //taker (ask) buy which token\\n    ) public returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        function(uint256, ERC20, uint256, ERC20) returns (uint256) fn =\\n            matchingEnabled ? _offeru : super.offer;\\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos //position to insert offer, 0 should be used if unknown\\n    ) external can_offer returns (uint256) {\\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, true);\\n    }\\n\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos, //position to insert offer, 0 should be used if unknown\\n        bool matching //match \\\"close enough\\\" orders?\\n    ) public can_offer returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n\\n        if (matchingEnabled) {\\n            return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, matching);\\n        }\\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    //Transfers funds from caller to offer maker, and from market to caller.\\n    function buy(uint256 id, uint256 amount) public can_buy(id) returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n\\n        //RBCN distribution on the trade\\n        if (AqueductDistributionLive) {\\n            IAqueduct(AqueductAddress).distributeToMakerAndTaker(\\n                getOwner(id),\\n                msg.sender\\n            );\\n        }\\n        function(uint256, uint256) returns (bool) fn =\\n            matchingEnabled ? _buys : super.buy;\\n\\n        return fn(id, amount);\\n    }\\n\\n    // Cancel an offer. Refunds offer maker.\\n    function cancel(uint256 id) public can_cancel(id) returns (bool success) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        if (matchingEnabled) {\\n            if (isOfferSorted(id)) {\\n                require(_unsort(id));\\n            } else {\\n                require(_hide(id));\\n            }\\n        }\\n        return super.cancel(id); //delete the offer.\\n    }\\n\\n    //insert offer into the sorted list\\n    //keepers need to use this function\\n    function insert(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) public returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(!isOfferSorted(id)); //make sure offers[id] is not yet sorted\\n        require(isActive(id)); //make sure offers[id] is active\\n\\n        _hide(id); //remove offer from unsorted offers list\\n        _sort(id, pos); //put offer into the sorted offers list\\n        emit LogInsert(msg.sender, id);\\n        return true;\\n    }\\n\\n    //deletes _rank [id]\\n    //  Function should be called by keepers.\\n    function del_rank(uint256 id) external returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(\\n            !isActive(id) &&\\n                _rank[id].delb != 0 &&\\n                _rank[id].delb < block.number - 10\\n        );\\n        delete _rank[id];\\n        emit LogDelete(msg.sender, id);\\n        return true;\\n    }\\n\\n    //set the minimum sell amount for a token\\n    //    Function is used to avoid \\\"dust offers\\\" that have\\n    //    very small amount of tokens to sell, and it would\\n    //    cost more gas to accept the offer, than the value\\n    //    of tokens received.\\n    function setMinSell(\\n        ERC20 pay_gem, //token to assign minimum sell amount to\\n        uint256 dust //maker (ask) minimum sell amount\\n    ) external auth note returns (bool) {\\n        _dust[address(pay_gem)] = dust;\\n        emit LogMinSell(address(pay_gem), dust);\\n        return true;\\n    }\\n\\n    //returns the minimum sell amount for an offer\\n    function getMinSell(\\n        ERC20 pay_gem //token for which minimum sell amount is queried\\n    ) external view returns (uint256) {\\n        return _dust[address(pay_gem)];\\n    }\\n\\n    //set buy functionality enabled/disabled\\n    function setBuyEnabled(bool buyEnabled_) external auth returns (bool) {\\n        buyEnabled = buyEnabled_;\\n        emit LogBuyEnabled(buyEnabled);\\n        return true;\\n    }\\n\\n    //set matching enabled/disabled\\n    //    If matchingEnabled true(default), then inserted offers are matched.\\n    //    Except the ones inserted by contracts, because those end up\\n    //    in the unsorted list of offers, that must be later sorted by\\n    //    keepers using insert().\\n    //    If matchingEnabled is false then RubiconMarket is reverted to ExpiringMarket,\\n    //    and matching is not done, and sorted lists are disabled.\\n    function setMatchingEnabled(bool matchingEnabled_)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        matchingEnabled = matchingEnabled_;\\n        emit LogMatchingEnabled(matchingEnabled);\\n        return true;\\n    }\\n\\n    //return the best offer for a token pair\\n    //      the best offer is the lowest one if it's an ask,\\n    //      and highest one if it's a bid offer\\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _best[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //return the next worse offer in the sorted list\\n    //      the worse offer is the higher one if its an ask,\\n    //      a lower one if its a bid offer,\\n    //      and in both cases the newer one if they're equal.\\n    function getWorseOffer(uint256 id) public view returns (uint256) {\\n        return _rank[id].prev;\\n    }\\n\\n    //return the next better offer in the sorted list\\n    //      the better offer is in the lower priced one if its an ask,\\n    //      the next higher priced one if its a bid offer\\n    //      and in both cases the older one if they're equal.\\n    function getBetterOffer(uint256 id) external view returns (uint256) {\\n        return _rank[id].next;\\n    }\\n\\n    //return the amount of better offers for a token pair\\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _span[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //get the first unsorted offer that was inserted by a contract\\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\\n    //      Their offers get put in the unsorted list of offers.\\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\\n    function getFirstUnsortedOffer() public view returns (uint256) {\\n        return _head;\\n    }\\n\\n    //get the next unsorted offer\\n    //      Can be used to cycle through all the unsorted offers.\\n    function getNextUnsortedOffer(uint256 id) public view returns (uint256) {\\n        return _near[id];\\n    }\\n\\n    function isOfferSorted(uint256 id) public view returns (bool) {\\n        return\\n            _rank[id].next != 0 ||\\n            _rank[id].prev != 0 ||\\n            _best[address(offers[id].pay_gem)][address(offers[id].buy_gem)] ==\\n            id;\\n    }\\n\\n    function sellAllAmount(\\n        ERC20 pay_gem,\\n        uint256 pay_amt,\\n        ERC20 buy_gem,\\n        uint256 min_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (pay_amt > 0) {\\n            //while there is amount to sell\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0); //Fails if there are not more offers\\n\\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\\n            if (\\n                pay_amt * 1 ether <\\n                wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (pay_amt >= offers[offerId].buy_amt) {\\n                //If amount to sell is higher or equal than current offer amount to buy\\n                fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount bought to acumulator\\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to sell\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                // if lower\\n                uint256 baux =\\n                    rmul(\\n                        pay_amt * 10**9,\\n                        rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n                    ) / 10**9;\\n                fill_amt = add(fill_amt, baux); //Add amount bought to acumulator\\n                take(bytes32(offerId), uint128(baux)); //We take the portion of the offer that we need\\n                pay_amt = 0; //All amount is sold\\n            }\\n        }\\n        require(fill_amt >= min_fill_amount);\\n    }\\n\\n    function buyAllAmount(\\n        ERC20 buy_gem,\\n        uint256 buy_amt,\\n        ERC20 pay_gem,\\n        uint256 max_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (buy_amt > 0) {\\n            //Meanwhile there is amount to buy\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0);\\n\\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\\n            if (\\n                buy_amt * 1 ether <\\n                wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (buy_amt >= offers[offerId].pay_amt) {\\n                //If amount to buy is higher or equal than current offer amount to sell\\n                fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount sold to acumulator\\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                //if lower\\n                fill_amt = add(\\n                    fill_amt,\\n                    rmul(\\n                        buy_amt * 10**9,\\n                        rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n                    ) / 10**9\\n                ); //Add amount sold to acumulator\\n                take(bytes32(offerId), uint128(buy_amt)); //We take the portion of the offer that we need\\n                buy_amt = 0; //All amount is bought\\n            }\\n        }\\n        require(fill_amt <= max_fill_amount);\\n    }\\n\\n    function getBuyAmount(\\n        ERC20 buy_gem,\\n        ERC20 pay_gem,\\n        uint256 pay_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (pay_amt > offers[offerId].buy_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount to buy accumulator\\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to pay\\n            if (pay_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                pay_amt * 10**9,\\n                rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to buy accumulator\\n    }\\n\\n    function getPayAmount(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint256 buy_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (buy_amt > offers[offerId].pay_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount to pay accumulator\\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n            if (buy_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                buy_amt * 10**9,\\n                rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to pay accumulator\\n    }\\n\\n    // ---- Internal Functions ---- //\\n\\n    function _buys(uint256 id, uint256 amount) internal returns (bool) {\\n        require(buyEnabled);\\n        if (amount == offers[id].pay_amt) {\\n            if (isOfferSorted(id)) {\\n                //offers[id] must be removed from sorted list because all of it is bought\\n                _unsort(id);\\n            } else {\\n                _hide(id);\\n            }\\n        }\\n\\n        require(super.buy(id, amount));\\n\\n        // If offer has become dust during buy, we cancel it\\n        if (\\n            isActive(id) &&\\n            offers[id].pay_amt < _dust[address(offers[id].pay_gem)]\\n        ) {\\n            dustId = id; //enable current msg.sender to call cancel(id)\\n            cancel(id);\\n        }\\n        return true;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _find(uint256 id) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        uint256 top = _best[pay_gem][buy_gem];\\n        uint256 old_top = 0;\\n\\n        // Find the larger-than-id order whose successor is less-than-id.\\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\\n            old_top = top;\\n            top = _rank[top].prev;\\n        }\\n        return old_top;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _findpos(uint256 id, uint256 pos) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        // Look for an active order.\\n        while (pos != 0 && !isActive(pos)) {\\n            pos = _rank[pos].prev;\\n        }\\n\\n        if (pos == 0) {\\n            //if we got to the end of list without a single active offer\\n            return _find(id);\\n        } else {\\n            // if we did find a nearby active offer\\n            // Walk the order book down from there...\\n            if (_isPricedLtOrEq(id, pos)) {\\n                uint256 old_pos;\\n\\n                // Guaranteed to run at least once because of\\n                // the prior if statements.\\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\\n                    old_pos = pos;\\n                    pos = _rank[pos].prev;\\n                }\\n                return old_pos;\\n\\n                // ...or walk it up.\\n            } else {\\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\\n                    pos = _rank[pos].next;\\n                }\\n                return pos;\\n            }\\n        }\\n    }\\n\\n    //return true if offers[low] priced less than or equal to offers[high]\\n    function _isPricedLtOrEq(\\n        uint256 low, //lower priced offer's id\\n        uint256 high //higher priced offer's id\\n    ) internal view returns (bool) {\\n        return\\n            mul(offers[low].buy_amt, offers[high].pay_amt) >=\\n            mul(offers[high].buy_amt, offers[low].pay_amt);\\n    }\\n\\n    //these variables are global only because of solidity local variable limit\\n\\n    //match offers with taker offer, and execute token transactions\\n    function _matcho(\\n        uint256 t_pay_amt, //taker sell how much\\n        ERC20 t_pay_gem, //taker sell which token\\n        uint256 t_buy_amt, //taker buy how much\\n        ERC20 t_buy_gem, //taker buy which token\\n        uint256 pos, //position id\\n        bool rounding //match \\\"close enough\\\" orders?\\n    ) internal returns (uint256 id) {\\n        uint256 best_maker_id; //highest maker id\\n        uint256 t_buy_amt_old; //taker buy how much saved\\n        uint256 m_buy_amt; //maker offer wants to buy this much token\\n        uint256 m_pay_amt; //maker offer wants to sell this much token\\n\\n        // there is at least one offer stored for token pair\\n        while (_best[address(t_buy_gem)][address(t_pay_gem)] > 0) {\\n            best_maker_id = _best[address(t_buy_gem)][address(t_pay_gem)];\\n            m_buy_amt = offers[best_maker_id].buy_amt;\\n            m_pay_amt = offers[best_maker_id].pay_amt;\\n\\n            // Ugly hack to work around rounding errors. Based on the idea that\\n            // the furthest the amounts can stray from their \\\"true\\\" values is 1.\\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\\n            // their \\\"correct\\\" values and m_buy_amt and t_buy_amt at -1.\\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\\n            // c * d > a * b + a + b + c + d, we write...\\n            if (\\n                mul(m_buy_amt, t_buy_amt) >\\n                mul(t_pay_amt, m_pay_amt) +\\n                    (\\n                        rounding\\n                            ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt\\n                            : 0\\n                    )\\n            ) {\\n                break;\\n            }\\n            // ^ The `rounding` parameter is a compromise borne of a couple days\\n            // of discussion.\\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\\n            emit LogMatch(id, min(m_pay_amt, t_buy_amt));\\n            t_buy_amt_old = t_buy_amt;\\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\\n\\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\\n                break;\\n            }\\n        }\\n\\n        if (\\n            t_buy_amt > 0 &&\\n            t_pay_amt > 0 &&\\n            t_pay_amt >= _dust[address(t_pay_gem)]\\n        ) {\\n            //new offer should be created\\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\\n            //insert offer into the sorted list\\n            _sort(id, pos);\\n        }\\n    }\\n\\n    // Make a new offer without putting it in the sorted list.\\n    // Takes funds from the caller into market escrow.\\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\\n    function _offeru(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem //maker (ask) buy which token\\n    ) internal returns (uint256 id) {\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n        _near[id] = _head;\\n        _head = id;\\n        emit LogUnsortedOffer(id);\\n    }\\n\\n    //put offer into the sorted list\\n    function _sort(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) internal {\\n        require(isActive(id));\\n\\n        ERC20 buy_gem = offers[id].buy_gem;\\n        ERC20 pay_gem = offers[id].pay_gem;\\n        uint256 prev_id; //maker (ask) id\\n\\n        pos = pos == 0 ||\\n            offers[pos].pay_gem != pay_gem ||\\n            offers[pos].buy_gem != buy_gem ||\\n            !isOfferSorted(pos)\\n            ? _find(id)\\n            : _findpos(id, pos);\\n\\n        if (pos != 0) {\\n            //offers[id] is not the highest offer\\n            //requirement below is satisfied by statements above\\n            //require(_isPricedLtOrEq(id, pos));\\n            prev_id = _rank[pos].prev;\\n            _rank[pos].prev = id;\\n            _rank[id].next = pos;\\n        } else {\\n            //offers[id] is the highest offer\\n            prev_id = _best[address(pay_gem)][address(buy_gem)];\\n            _best[address(pay_gem)][address(buy_gem)] = id;\\n        }\\n\\n        if (prev_id != 0) {\\n            //if lower offer does exist\\n            //requirement below is satisfied by statements above\\n            //require(!_isPricedLtOrEq(id, prev_id));\\n            _rank[prev_id].next = id;\\n            _rank[id].prev = prev_id;\\n        }\\n\\n        _span[address(pay_gem)][address(buy_gem)]++;\\n        emit LogSortedOffer(id);\\n    }\\n\\n    // Remove offer from the sorted list (does not cancel offer)\\n    function _unsort(\\n        uint256 id //id of maker (ask) offer to remove from sorted list\\n    ) internal returns (bool) {\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        require(_span[pay_gem][buy_gem] > 0);\\n\\n        require(\\n            _rank[id].delb == 0 && //assert id is in the sorted list\\n                isOfferSorted(id)\\n        );\\n\\n        if (id != _best[pay_gem][buy_gem]) {\\n            // offers[id] is not the highest offer\\n            require(_rank[_rank[id].next].prev == id);\\n            _rank[_rank[id].next].prev = _rank[id].prev;\\n        } else {\\n            //offers[id] is the highest offer\\n            _best[pay_gem][buy_gem] = _rank[id].prev;\\n        }\\n\\n        if (_rank[id].prev != 0) {\\n            //offers[id] is not the lowest offer\\n            require(_rank[_rank[id].prev].next == id);\\n            _rank[_rank[id].prev].next = _rank[id].next;\\n        }\\n\\n        _span[pay_gem][buy_gem]--;\\n        _rank[id].delb = block.number; //mark _rank[id] for deletion\\n        return true;\\n    }\\n\\n    //Hide offer from the unsorted order book (does not cancel offer)\\n    function _hide(\\n        uint256 id //id of maker offer to remove from unsorted list\\n    ) internal returns (bool) {\\n        uint256 uid = _head; //id of an offer in unsorted offers list\\n        uint256 pre = uid; //id of previous offer in unsorted offers list\\n\\n        require(!isOfferSorted(id)); //make sure offer id is not in sorted offers list\\n\\n        if (_head == id) {\\n            //check if offer is first offer in unsorted offers list\\n            _head = _near[id]; //set head to new first unsorted offer\\n            _near[id] = 0; //delete order from unsorted order list\\n            return true;\\n        }\\n        while (uid > 0 && uid != id) {\\n            //find offer in unsorted order list\\n            pre = uid;\\n            uid = _near[uid];\\n        }\\n        if (uid != id) {\\n            //did not find offer id in unsorted offers list\\n            return false;\\n        }\\n        _near[pre] = _near[id]; //set previous unsorted offer to point to offer after offer id\\n        _near[id] = 0; //delete order from unsorted order list\\n        return true;\\n    }\\n\\n    function setFeeBPS(uint256 _newFeeBPS) external auth returns (bool) {\\n        feeBPS = _newFeeBPS;\\n        return true;\\n    }\\n\\n    // Adding to token whitelist entrypoint\\n    function addToWhitelist(address addition) external auth {\\n        whitelist[addition] = true;\\n    }\\n\\n    function removeFromWhitelist(address remove) external auth {\\n        whitelist[remove] = false;\\n    }\\n\\n    function setAqueductDistributionLive(bool live)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductDistributionLive = live;\\n        return true;\\n    }\\n\\n    function setAqueductAddress(address _Aqueduct)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductAddress = _Aqueduct;\\n        return true;\\n    }\\n\\n    function setFeeTo(address newFeeTo) external auth returns (bool) {\\n        feeTo = newFeeTo;\\n        return true;\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\\ninterface IAqueduct {\\n    function distributeToMakerAndTaker(address maker, address taker)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x6ed30466e50bb07b635d1ed13551cc7c5c7a65355e6ed58a42574371caaa4fd4\"}},\"version\":1}",
  "bytecode": "0x608060405260016006600160a81b816200001862000080565b8160ff021916908315150217906200002f620000e2565b5050506001600660166101000a816200004762000080565b8160ff021916908315150217906200005e620000e2565b50505034801562000079576000806200007662000131565b50505b506200019e565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620000dd57600082820152602001620000c4565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020620000c4565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156200016b5780860151828201604001526020016200014e565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6153b980620001ae6000396000f3fe608060405234801561001957600080610016614f0f565b50505b50600436106103665760003560e01c80637ca9429a116101dc578063be71f5ce1161010d578063d6febde8116100ab578063f09ea2a611610085578063f09ea2a614610c28578063f46901ed14610c6d578063f582d29314610c9c578063ff1fd97414610ca457610366565b8063d6febde814610b7c578063e1a6f01414610ba8578063e43252d714610bf957610366565b8063c2d526aa116100e7578063c2d526aa14610abe578063c41a360a14610b08578063d2b420ce14610b2e578063d6f1546914610b5457610366565b8063be71f5ce14610a52578063bf7c734e14610a81578063c2b6b58c14610ab657610366565b80638da5cb5b1161017a578063943911bc11610154578063943911bc146109b8578063a128171b146109de578063a78d431614610a06578063b4f9b6c814610a2c57610366565b80638da5cb5b1461095b578063911550f41461096357806391be90c81461098957610366565b806385ee7ba6116101b657806385ee7ba61461087b5780638a72ea6a146108b25780638ab1d681146109245780638af82a2e1461095357610366565b80637ca9429a146107db5780638185402b1461081257806382afd23b1461085557610366565b806340e58ee5116102b6578063604b6a9c116102545780636b9d8c4b1161022e5780636b9d8c4b1461075257806374c1d7d31461077657806375f12b21146107ad578063779997c3146107b557610366565b8063604b6a9c146106cf57806361f54a79146106f5578063677170e11461071b57610366565b80634960645511610290578063496064551461063f578063511fa48714610674578063557ed1ba146106a357806356ad8764146106c757610366565b806340e58ee5146105995780634579268a146105bf578063467f0b7b1461061957610366565b8063144a2752116103235780631d834a1b116102fd5780631d834a1b14610535578063232cae0b146105615780632aed1905146105695780632f90a6fc1461059157610366565b8063144a2752146104a5578063158ef93e146104e45780631b33d412146104ec57610366565b806301492a0b146103745780630374fc6f146103905780630621b4f6146103d957806307da68f51461041c578063093f51981461042657806313af403514610476575b600080610371614f0f565b50505b61037c610ce3565b604051901515815260200160405180910390f35b6103c7600480360360408110156103af576000806103ac614f0f565b50505b506001600160a01b0381358116916020013516610cfc565b60405190815260200160405180910390f35b6103c7600480360360808110156103f8576000806103f5614f0f565b50505b506001600160a01b0381358116916020810135916040820135169060600135610d3e565b610424610f3b565b005b6103c76004803603608081101561044557600080610442614f0f565b50505b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610fbf565b6104246004803603602081101561049557600080610492614f0f565b50505b50356001600160a01b0316610fe8565b6103c7600480360360608110156104c4576000806104c1614f0f565b50505b506001600160a01b038135811691602081013590911690604001356110c2565b61037c6111b2565b6103c7600480360360a081101561050b57600080610508614f0f565b50505b508035906001600160a01b03602082013581169160408101359160608201351690608001356111be565b61037c6004803603604081101561055457600080610551614f0f565b50505b50803590602001356111f4565b6103c76112fa565b61037c6004803603602081101561058857600080610585614f0f565b50505b50351515611307565b61037c6113d9565b61037c600480360360208110156105b8576000806105b5614f0f565b50505b50356113e5565b6105e5600480360360208110156105de576000806105db614f0f565b50505b5035611599565b6040519384526001600160a01b03928316602085015260408085019290925290911660608301526080909101905180910390f35b61037c6004803603602081101561063857600080610635614f0f565b50505b5035611695565b6104246004803603604081101561065e5760008061065b614f0f565b50505b50803590602001356001600160801b03166117ff565b6103c76004803603602081101561069357600080610690614f0f565b50505b50356001600160a01b0316611828565b6106ab611848565b6040516001600160401b03909116815260200160405180910390f35b6103c7611858565b61037c600480360360208110156106ee576000806106eb614f0f565b50505b5035611862565b6103c76004803603602081101561071457600080610711614f0f565b50505b50356118ce565b6103c76004803603604081101561073a57600080610737614f0f565b50505b506001600160a01b03813581169160200135166118e4565b61075a61190a565b6040516001600160a01b03909116815260200160405180910390f35b6103c76004803603604081101561079557600080610792614f0f565b50505b506001600160a01b0381358116916020013516611929565b61037c61194f565b610424600480360360208110156107d4576000806107d1614f0f565b50505b503561195b565b6103c7600480360360408110156107fa576000806107f7614f0f565b50505b506001600160a01b0381358116916020013516611b9a565b6103c7600480360360808110156108315760008061082e614f0f565b50505b506001600160a01b0381358116916020810135916040820135169060600135611bd3565b61037c6004803603602081101561087457600080610871614f0f565b50505b5035611d9b565b6104246004803603604081101561089a57600080610897614f0f565b50505b508035151590602001356001600160a01b0316611dd1565b6108d8600480360360208110156108d1576000806108ce614f0f565b50505b5035611f59565b6040519586526001600160a01b039485166020870152604080870194909452918416606086015290921660808401526001600160401b0390911660a083015260c0909101905180910390f35b6104246004803603602081101561094357600080610940614f0f565b50505b50356001600160a01b0316612002565b6103c761208d565b61075a612099565b6103c7600480360360208110156109825760008061097f614f0f565b50505b50356120a4565b6103c7600480360360208110156109a8576000806109a5614f0f565b50505b50356001600160a01b03166120ba565b6103c7600480360360208110156109d7576000806109d4614f0f565b50505b50356120d2565b61037c600480360360208110156109fd576000806109fa614f0f565b50505b503515156120eb565b6103c760048036036020811015610a2557600080610a22614f0f565b50505b5035612166565b61042460048036036020811015610a4b57600080610a48614f0f565b50505b503561217e565b61037c60048036036020811015610a7157600080610a6e614f0f565b50505b50356001600160a01b0316612199565b61037c60048036036040811015610aa057600080610a9d614f0f565b50505b506001600160a01b03813516906020013561221e565b61037c61235f565b610ae460048036036020811015610add57600080610ada614f0f565b50505b5035612364565b60405180848152602001838152602001828152602001935050505060405180910390f35b61075a60048036036020811015610b2757600080610b24614f0f565b50505b503561239c565b61037c60048036036020811015610b4d57600080610b4a614f0f565b50505b50356123cf565b61037c60048036036020811015610b7357600080610b70614f0f565b50505b503515156124bb565b61037c60048036036040811015610b9b57600080610b98614f0f565b50505b5080359060200135612567565b6103c7600480360360c0811015610bc757600080610bc4614f0f565b50505b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515612741565b61042460048036036020811015610c1857600080610c15614f0f565b50505b50356001600160a01b0316612840565b6103c760048036036080811015610c4757600080610c44614f0f565b50505b508035906001600160a01b036020820135811691604081013591606090910135166128b9565b61037c60048036036020811015610c8c57600080610c89614f0f565b50505b50356001600160a01b031661295a565b61037c6129bd565b6103c760048036036060811015610cc357600080610cc0614f0f565b50505b506001600160a01b038135811691602081013590911690604001356129c9565b60166006610cef614f7a565b906101000a900460ff1681565b6001600160a01b03821660009081526009602052604081206001600160a01b038316600090815260209190915260409020610d35614f7a565b90505b92915050565b6000806004610d4b614f7a565b906101000a900460ff1615610da45760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390610da1614f0f565b50505b60005b8415610f1c57610db78487610cfc565b905080610dcc57600080610dc9614f0f565b50505b60008181526002602052610e049060409020600201610de9614f7a565b6000838152600260205260409020610dff614f7a565b612a93565b85670de0b6b3a7640000021015610e1a57610f1c565b6000818152600260205260409020600201610e33614f7a565b8510610eaa5760008181526002602052610e5a90839060409020610e55614f7a565b612ac2565b60008281526002602052909250610e8190869060409020600201610e7c614f7a565b612b1e565b60008281526002602052909550610ea590829060409020610ea0614f7a565b6117ff565b610f17565b60008181526002602052633b9aca00610ef1878202610eec60408520610ece614f7a565b6000878152600260205260409020600201610ee7614f7a565b612b73565b612b8f565b81610ef857fe5b049050610f058382612ac2565b9250610f1182826117ff565b60009550505b610da7565b82821015610f3257600080610f2f614f0f565b50505b50949350505050565b610f4c5a610f47614fd5565b612bbf565b610f935760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390610f90614f0f565b50505b60016006600160a01b81610fa5614f7a565b8160ff02191690831515021790610fba61501b565b505050565b6000610fdf836001600160801b031686846001600160801b0316876128b9565b95945050505050565b610ff45a610f47614fd5565b61103b5760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390611038614f0f565b50505b806000600181611049614f7a565b816001600160a01b0302191690836001600160a01b031602179061106b61501b565b5050506000809061107a614f7a565b906101000a90046001600160a01b03166001600160a01b03167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b6000806110cf8585610cfc565b90505b60008181526002602052604090206002016110eb614f7a565b83111561115b576000818152600260205261110e90839060409020610e55614f7a565b6000828152600260205290925061113090849060409020600201610e7c614f7a565b9250821561115657611141816120d2565b90508061115657600080611153614f0f565b50505b6110d2565b610fdf82633b9aca006111a586633b9aca0002610eec6002600088815260200190815260200160002061118c614f7a565b6000888152600260205260409020600201610ee7614f7a565b816111ac57fe5b04612ac2565b60176006610cef614f7a565b60006111c861235f565b156111db576000806111d8614f0f565b50505b6111ea86868686866001612741565b9695505050505050565b6000806004611201614f7a565b906101000a900460ff161561125a5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611257614f0f565b50505b611263836123cf565b1561127657600080611273614f0f565b50505b61127f83611d9b565b6112915760008061128e614f0f565b50505b61129a83612c7f565b506112a58383612da3565b7f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d2839405a6112cf614fd5565b846040516001600160a01b03909216825260208201526040908101905180910390a150600192915050565b6001611304614f7a565b81565b60006113155a610f47614fd5565b61135c5760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390611359614f0f565b50505b816006600160b01b8161136d614f7a565b8160ff0219169083151502179061138261501b565b5050507fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d960066016906113b3614f7a565b906101000a900460ff16604051901515815260200160405180910390a15060015b919050565b60186006610cef614f7a565b6000816113f181611d9b565b6114355760405162461bcd60e51b815260040180806020018281038252602d815260200180615296602d913960400191505060405180910390611432614f0f565b50505b61143d61235f565b80611469575061144c8161239c565b6001600160a01b03165a61145e614fd5565b6001600160a01b0316145b8061147c5750600e611479614f7a565b81145b6114c05760405162461bcd60e51b81526004018080602001828103825260748152602001806152c360749139608001915050604051809103906114bd614f0f565b50505b600060046114cc614f7a565b906101000a900460ff16156115255760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611522614f0f565b50505b60166006611531614f7a565b906101000a900460ff161561158957611549836123cf565b1561156e5761155783613095565b61156957600080611566614f0f565b50505b611589565b61157783612c7f565b61158957600080611586614f0f565b50505b611592836133d1565b9392505050565b6000806000806115a7615069565b600086815260026020526040902060405160c081016040529081816115ca614f7a565b81526020016000600183016115dd614f7a565b6001600160a01b036101009290920a900416815260200160028201611600614f7a565b8152602001600060038301611613614f7a565b6001600160a01b036101009290920a9004168152602001600060048301611638614f7a565b6001600160a01b036101009290920a900416815260200160146004830161165d614f7a565b6001600160401b036101009290920a900416905250905080518160200151826040015183606001519450945094509450509193509193565b60008060046116a2614f7a565b906101000a900460ff16156116fb5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b6044820152606401604051809103906116f8614f0f565b50505b61170482611d9b565b15801561172857506000828152600860205260409020600201611725614f7a565b15155b80156117595750600a5a61173a61509d565b600084815260086020529190039060409020600201611757614f7a565b105b61176b57600080611768614f0f565b50505b60008281526008602052604090206000808261178561501b565b50506001820160009061179661501b565b5050600282016000906117a761501b565b505050507fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c5a6117d5614fd5565b836040516001600160a01b03909216825260208201526040908101905180910390a1506001919050565b611812826001600160801b038316612567565b61182457600080611821614f0f565b50505b5050565b6001600160a01b0381166000908152600b60205260408120610d38614f7a565b60005a6118536150e3565b905090565b600e611304614f7a565b60006118705a610f47614fd5565b6118b75760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906118b4614f0f565b50505b818060056118c361501b565b506001949350505050565b6000818152600c60205260408120610d38614f7a565b600a60205281600052604060002060205280600052604060002091506113049050614f7a565b60006007611916614f7a565b906101000a90046001600160a01b031681565b600960205281600052604060002060205280600052604060002091506113049050614f7a565b60146006610cef614f7a565b8061196581611d9b565b61197757600080611974614f0f565b50505b61197f61235f565b156119925760008061198f614f0f565b50505b600082815260026020528290604090206004016000906119b0614f7a565b906101000a90046001600160a01b03166001600160a01b0316600260008381526020019081526020016000206001016000906119ea614f7a565b906101000a90046001600160a01b031660026000848152602001908152602001600020600301600090611a1b614f7a565b906101000a90046001600160a01b03166040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001206000838152600260205285907f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a29060409020600101600090611aa6614f7a565b906101000a90046001600160a01b031660026000878152602001908152602001600020600301600090611ad7614f7a565b906101000a90046001600160a01b031660026000888152602001908152602001600020611b02614f7a565b6000888152600260205260409020600201611b1b614f7a565b6000898152600260205260409020600401601490611b37614f7a565b906101000a90046001600160401b03166040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a4505050565b6001600160a01b0382166000908152600a602052604081206001600160a01b038316600090815260209190915260409020610d35614f7a565b6000806004611be0614f7a565b906101000a900460ff1615611c395760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611c36614f0f565b50505b60005b8415611d8857611c4c8685610cfc565b905080611c6157600080611c5e614f0f565b50505b60008181526002602052611c949060409020611c7b614f7a565b6000838152600260205260409020600201610dff614f7a565b85670de0b6b3a7640000021015611caa57611d88565b6000818152600260205260409020611cc0614f7a565b8510611d285760008181526002602052611ce590839060409020600201610e55614f7a565b60008281526002602052909250611d0490869060409020610e7c614f7a565b60008281526002602052909550611d2390829060409020610ea0614f7a565b611d83565b611d7282633b9aca006111a588633b9aca0002610eec60026000888152602001908152602001600020600201611d5c614f7a565b6000888152600260205260409020610ee7614f7a565b9150611d7e81866117ff565b600094505b611c3c565b82821115610f3257600080610f2f614f0f565b600081815260026020528060408120600401601490611db8614f7a565b6001600160401b036101009290920a9004161192915050565b60176006611ddd614f7a565b906101000a900460ff1615611e415760405162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015260640160405180910390611e3e614f0f565b50505b816006600160c01b81611e52614f7a565b8160ff02191690831515021790611e6761501b565b50505080600660006101000a81611e7c614f7a565b816001600160a01b0302191690836001600160a01b0316021790611e9e61501b565b5050505a611eaa614fd5565b6000600181611eb7614f7a565b816001600160a01b0302191690836001600160a01b0316021790611ed961501b565b5050505a611ee5614fd5565b6001600160a01b03167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a26014806005611f2761501b565b5050506001600660176101000a81611f3d614f7a565b8160ff02191690831515021790611f5261501b565b5050505050565b6002602052806000526040600020905080611f72614f7a565b90600060018201611f81614f7a565b906101000a90046001600160a01b03169080600201611f9e614f7a565b90600060038201611fad614f7a565b906101000a90046001600160a01b03169080600401600090611fcd614f7a565b906101000a90046001600160a01b03169080600401601490611fed614f7a565b906101000a90046001600160401b0316905086565b61200e5a610f47614fd5565b6120555760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612052614f0f565b50505b6001600160a01b0381166000908152600360205260408120600181612078614f7a565b8160ff0219169083151502179061182161501b565b6000600d611853614f7a565b600080611916614f7a565b6000818152600860205260408120610d38614f7a565b600b6020528060005260406000209050611304614f7a565b6000818152600860205260408120600101610d38614f7a565b60006120f95a610f47614fd5565b6121405760405162461bcd60e51b8152602060048201526014602482015260008051602061539983398151915260448201526064016040518091039061213d614f0f565b50505b816006600160c01b81612151614f7a565b8160ff021916908315150217906118c361501b565b600c6020528060005260406000209050611304614f7a565b612187816113e5565b61219657600080610fba614f0f565b50565b60006121a75a610f47614fd5565b6121ee5760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906121eb614f0f565b50505b8160076001816121fc614f7a565b816001600160a01b0302191690836001600160a01b03160217906118c361501b565b600061222c5a610f47614fd5565b6122735760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612270614f0f565b50505b6004356024353481835a612285614fd5565b6001600160a01b03166000356001600160e01b0319166001600160e01b0319168460003660405183815260406020820181815290820183905260608201848480828437600083820152601f01601f1916909101955060409450505050505180910390a46001600160a01b0386166000908152600b602052859060409020819061230c61501b565b5050507fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d086866040516001600160a01b03909216825260208201526040908101905180910390a150600195945050505050565b600090565b600860205280600052604060002090508061237d614f7a565b908060010161238a614f7a565b9080600201612397614f7a565b905083565b60008181526002602052604081206004016000906123b8614f7a565b906101000a90046001600160a01b03169050919050565b60008181526008602052604081206123e5614f7a565b15158061240957506000828152600860205260409020600101612406614f7a565b15155b80610d38575060008281526002602052829060099060408120600101600090612430614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600084815260026020526040812060030160009061247c614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000206124b4614f7a565b1492915050565b60006124c95a610f47614fd5565b6125105760405162461bcd60e51b8152602060048201526014602482015260008051602061539983398151915260448201526064016040518091039061250d614f0f565b50505b816006600160a81b81612521614f7a565b8160ff0219169083151502179061253661501b565b5050507f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c160066015906113b3614f7a565b60008261257381611d9b565b61258557600080612582614f0f565b50505b61258d61235f565b156125a05760008061259d614f0f565b50505b600060046125ac614f7a565b906101000a900460ff16156126055760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390612602614f0f565b50505b60186006612611614f7a565b906101000a900460ff1615612708576000600761262c614f7a565b906101000a90046001600160a01b03166001600160a01b031663b30ed7b36126538661239c565b5a61265c614fd5565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000878061269f615129565b1580156126b4576000806126b1614f0f565b50505b505a6126be615175565b5050505050501580156126de573d6000803e3d60006126db614f0f565b50505b505050506040513d60208110156126fd576000806126fa614f0f565b50505b810190808051505050505b61526060166006612717614f7a565b906101000a900460ff1661272d576138b2612731565b6142dd5b9050610fdf85858363ffffffff16565b600061274b61235f565b1561275e5760008061275b614f0f565b50505b6000600461276a614f7a565b906101000a900460ff16156127c35760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b6044820152606401604051809103906127c0614f0f565b50505b6001600160a01b0386166000908152600b6020528790604090206127e5614f7a565b11156127f9576000806127f6614f0f565b50505b60166006612805614f7a565b906101000a900460ff16156128295761282287878787878761440f565b90506111ea565b612835878787876145fa565b979650505050505050565b61284c5a610f47614fd5565b6128935760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612890614f0f565b50505b6001600160a01b0381166000908152600360205260019060409020600181612078614f7a565b60008060046128c6614f7a565b906101000a900460ff161561291f5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b60448201526064016040518091039061291c614f0f565b50505b6152606016600661292e614f7a565b906101000a900460ff16612944576145fa612948565b614b465b90506111ea868686868563ffffffff16565b60006129685a610f47614fd5565b6129af5760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906129ac614f0f565b50505b8160066001816121fc614f7a565b60156006610cef614f7a565b6000806129d68486610cfc565b90505b60008181526002602052604090206129ef614f7a565b831115612a5f5760008181526002602052612a1590839060409020600201610e55614f7a565b60008281526002602052909250612a3490849060409020610e7c614f7a565b92508215612a5a57612a45816120d2565b905080612a5a57600080612a57614f0f565b50505b6129d9565b610fdf82633b9aca006111a586633b9aca0002610eec60026000888152602001908152602001600020600201611d5c614f7a565b600081612ab3612aab85670de0b6b3a7640000614bf9565b6002856111ac565b81612aba57fe5b049392505050565b80820182811015610d385760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640160405180910390612b16614f0f565b505092915050565b80820382811115610d385760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640160405180910390612b16614f0f565b600081612ab3612aab856b033b2e3c9fd0803ce8000000614bf9565b60006b033b2e3c9fd0803ce8000000612ab3612bab8585614bf9565b60026b033b2e3c9fd0803ce80000006111ac565b60005a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015612c1757600082820152602001612c00565b5050506001600160a01b0316826001600160a01b03161415612c3b575060016113d4565b600080612c46614f7a565b906101000a90046001600160a01b03166001600160a01b0316826001600160a01b03161415612c77575060016113d4565b5060006113d4565b600080600d612c8c614f7a565b905080612c98846123cf565b15612cab57600080612ca8614f0f565b50505b83600d612cb6614f7a565b1415612d06576000848152600c60205260409020612cd2614f7a565b80600d612cdd61501b565b5050506000848152600c602052604081208190612cf861501b565b5050506001925050506113d4565b600082118015612d165750838214155b15612d3b57506000818152600c602052819060409020612d34614f7a565b9150612d06565b838214612d4d576000925050506113d4565b6000848152600c60205260409020612d63614f7a565b6000828152600c602052604090208190612d7b61501b565b5050506000848152600c602052604081208190612d9661501b565b5060019695505050505050565b612dac82611d9b565b612dbe57600080612dbb614f0f565b50505b6000828152600260205260408120600301600090612dda614f7a565b906101000a90046001600160a01b03169050600060026000858152602001908152602001600020600101600090612e0f614f7a565b906101000a90046001600160a01b0316905060008360001480612e705750600084815260026020526001600160a01b0383169060409020600101600090612e54614f7a565b906101000a90046001600160a01b03166001600160a01b031614155b80612eb95750600084815260026020526001600160a01b0384169060409020600301600090612e9d614f7a565b906101000a90046001600160a01b03166001600160a01b031614155b80612eca5750612ec8846123cf565b155b612edd57612ed88585614c61565b612ee6565b612ee685614d54565b93508315612f4c576000848152600860205260409020600101612f07614f7a565b600085815260086020529091508590604090206001018190612f2761501b565b505050600085815260086020528490604090208190612f4461501b565b505050612fc9565b6001600160a01b03821660009081526009602052604090206001600160a01b038416600090815260209190915260409020612f85614f7a565b6001600160a01b038316600090815260096020529091508590604090206001600160a01b0385166000908152602091909152604090208190612fc561501b565b5050505b801561300d57600081815260086020528590604090208190612fe961501b565b50505060008581526008602052819060409020600101819061300961501b565b5050505b6001600160a01b0382166000908152600a602052604090206001600160a01b038416600090815260209190915260409020600081613049614f7a565b9160018301915061305861501b565b5050507f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd8560405190815260200160405180910390a15050505050565b6000818152600260205280604081206003016000906130b2614f7a565b906101000a90046001600160a01b031690506000600260008581526020019081526020016000206001016000906130e7614f7a565b6001600160a01b036101009290920a9004166000818152600a602052909150604081206001600160a01b03841660009081526020919091526040902061312b614f7a565b1161313e5760008061313b614f0f565b50505b6000848152600860205260409020600201613157614f7a565b1580156131685750613168846123cf565b61317a57600080613177614f0f565b50505b6001600160a01b03811660009081526009602052604090206001600160a01b0383166000908152602091909152604090206131b3614f7a565b8414613254576000848152600860208190528591604081206131d3614f7a565b81526020019081526020016000206001016131ec614f7a565b146131ff576000806131fc614f0f565b50505b6000848152600860205260409020600101613218614f7a565b6000858152600860208190529060408120613231614f7a565b8152602001908152602001600020600101819061324c61501b565b5050506132ac565b600084815260086020526040902060010161326d614f7a565b6001600160a01b03821660009081526009602052604090206001600160a01b03841660009081526020919091526040902081906132a861501b565b5050505b60008481526008602052604090206001016132c5614f7a565b1561335e576000848152600860208190528591604081206001016132e7614f7a565b81526020019081526020016000206132fd614f7a565b146133105760008061330d614f0f565b50505b6000848152600860205260409020613326614f7a565b6000858152600860208190529060408120600101613342614f7a565b8152602001908152602001600020819061335a61501b565b5050505b6001600160a01b0381166000908152600a602052604090206001600160a01b03831660009081526020919091526040902060008161339a614f7a565b91600019830191506133aa61501b565b5050505a6133b661509d565b60008581526008602052604090206002018190612d9661501b565b6000816133dd81611d9b565b6134215760405162461bcd60e51b815260040180806020018281038252602d815260200180615296602d91396040019150506040518091039061341e614f0f565b50505b61342961235f565b8061345557506134388161239c565b6001600160a01b03165a61344a614fd5565b6001600160a01b0316145b806134685750600e613465614f7a565b81145b6134ac5760405162461bcd60e51b81526004018080602001828103825260748152602001806152c360749139608001915050604051809103906134a9614f0f565b50505b600060046134b8614f7a565b906101000a900460ff16156134d5576000806134d2614f0f565b50505b6001600481816134e3614f7a565b8160ff021916908315150217906134f861501b565b505050613503615069565b600084815260026020526040902060405160c08101604052908181613526614f7a565b8152602001600060018301613539614f7a565b6001600160a01b036101009290920a90041681526020016002820161355c614f7a565b815260200160006003830161356f614f7a565b6001600160a01b036101009290920a9004168152602001600060048301613594614f7a565b6001600160a01b036101009290920a90041681526020016014600483016135b9614f7a565b6001600160401b036101009290920a9004169052506000858152600260205290915060409020600080826135eb61501b565b5050600182810190816135fc614f7a565b906001600160a01b030219169061361161501b565b50506002820160009061362261501b565b505060038201600181613633614f7a565b906001600160a01b030219169061364861501b565b505060048201600181613659614f7a565b906001600160a01b030219169061366e61501b565b505060048201600160a01b81613682614f7a565b906001600160401b030219169061369761501b565b5050505080602001516001600160a01b031663a9059cbb826080015183516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087806136f6615129565b15801561370b57600080613708614f0f565b50505b505a613715615175565b505050505050158015613735573d6000803e3d6000613732614f0f565b50505b505050506040513d602081101561375457600080613751614f0f565b50505b81019080805192506137719150505760008061376e614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888460405190815260200160405180910390a180608001516001600160a01b0316816020015182606001516040516001600160601b0319606093841b811660208301529190921b16603482015260480160405160208183030381529060405280519060200120857f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b481999560208501518560600151865187604001515a6138336150e3565b6040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a45060019150600060048381613894614f7a565b8160ff021916908315150217906138a961501b565b50505050919050565b6000826138be81611d9b565b6138d0576000806138cd614f0f565b50505b6138d861235f565b156138eb576000806138e8614f0f565b50505b600060046138f7614f7a565b906101000a900460ff161561391457600080613911614f0f565b50505b600160048181613922614f7a565b8160ff0219169083151502179061393761501b565b505050613942615069565b600085815260026020526040902060405160c08101604052908181613965614f7a565b8152602001600060018301613978614f7a565b6001600160a01b036101009290920a90041681526020016002820161399b614f7a565b81526020016000600383016139ae614f7a565b6001600160a01b036101009290920a90041681526020016000600483016139d3614f7a565b6001600160a01b036101009290920a90041681526020016014600483016139f8614f7a565b6001600160401b036101009290920a900416905250905060008151613a21868460400151614bf9565b81613a2857fe5b04905080816001600160801b031614613a865760405162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015260640160405180910390613a83614f0f565b50505b84856001600160801b031614613ae45760405162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015260640160405180910390613ae1614f0f565b50505b841580613aef575080155b80613afa5750815185115b80613b085750816040015181115b15613b18576000935050506142af565b6000612710613b30836005613b2b614f7a565b614bf9565b81613b3757fe5b04905082606001516001600160a01b03166323b872dd5a613b56614fd5565b60006006613b62614f7a565b906101000a90046001600160a01b0316846040516001600160e01b031960e086901b1681526001600160a01b039384166004820152919092166024820152604481019190915260640160206040518083038160008780613bc0615129565b158015613bd557600080613bd2614f0f565b50505b505a613bdf615175565b505050505050158015613bff573d6000803e3d6000613bfc614f0f565b50505b505050506040513d6020811015613c1e57600080613c1b614f0f565b50505b8101908080519250613c829150505760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015260640160405180910390613c7f614f0f565b50505b613c8d835187612b1e565b60008881526002602052604090208190613ca561501b565b505050613cb6836040015183612b1e565b60008881526002602052604090206002018190613cd161501b565b50505082606001516001600160a01b03166323b872dd5a613cf0614fd5565b8560800151856040516001600160e01b031960e086901b1681526001600160a01b039384166004820152919092166024820152604481019190915260640160206040518083038160008780613d43615129565b158015613d5857600080613d55614f0f565b50505b505a613d62615175565b505050505050158015613d82573d6000803e3d6000613d7f614f0f565b50505b505050506040513d6020811015613da157600080613d9e614f0f565b50505b8101908080519250613df09150505760405162461bcd60e51b81526004018080602001828103825260628152602001806153376062913960800191505060405180910390613ded614f0f565b50505b82602001516001600160a01b031663a9059cbb5a613e0c614fd5565b886040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780613e4e615129565b158015613e6357600080613e60614f0f565b50505b505a613e6d615175565b505050505050158015613e8d573d6000803e3d6000613e8a614f0f565b50505b505050506040513d6020811015613eac57600080613ea9614f0f565b50505b8101908080519250613efb9150505760405162461bcd60e51b81526004018080602001828103825260338152602001806152636033913960400191505060405180910390613ef8614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888760405190815260200160405180910390a15a613f37614fd5565b6001600160a01b031683608001516001600160a01b0316846020015185606001516040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001207f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f8a602088015188606001518c895a613fca6150e3565b6040519586526001600160a01b039485166020870152929093166040808601919091526001600160801b039182166060860152921660808401526001600160401b031660a083015260c0909101905180910390a45a614027614fd5565b6001600160a01b031683608001516001600160a01b0316846020015185606001516040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001207f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e28a602088015188606001518c8989600060066140be614f7a565b906101000a90046001600160a01b03165a6140d76150e3565b6040519788526001600160a01b0396871660208901529486166040808901919091526001600160801b03948516606089015292909316608087015260a0860152921660c08401526001600160401b031660e0830152610100909101905180910390a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd2443875888560405191825260208201526040908101905180910390a360008781526002602052604090206141a5614f7a565b6142a7576000878152600260205260409020600080826141c361501b565b5050600182810190816141d4614f7a565b906001600160a01b03021916906141e961501b565b5050600282016000906141fa61501b565b50506003820160018161420b614f7a565b906001600160a01b030219169061422061501b565b505060048201600181614231614f7a565b906001600160a01b030219169061424661501b565b505060048201600160a01b8161425a614f7a565b906001600160401b030219169061426f61501b565b505050507f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def556768760405190815260200160405180910390a15b600194505050505b600060046001816142be614f7a565b8160ff021916908315150217906142d361501b565b5050505092915050565b6000601560066142eb614f7a565b906101000a900460ff1661430757600080614304614f0f565b50505b600083815260026020526040902061431d614f7a565b82141561434c5761432d836123cf565b156143415761433b83613095565b5061434c565b61434a83612c7f565b505b61435683836138b2565b61436857600080614365614f0f565b50505b61437183611d9b565b80156143e7575060008381526002602052600b9060408120600101600090614397614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000206143cf614f7a565b60008481526002602052604090206143e5614f7a565b105b15614406578280600e6143f861501b565b505050614404836113e5565b505b50600192915050565b60008060008060005b6001600160a01b03881660009081526009602052604081206001600160a01b038c16600090815260209190915260409020614451614f7a565b1115614594576001600160a01b03881660009081526009602052604090206001600160a01b038b16600090815260209190915260409020614490614f7a565b60008181526002602052909450604090206002016144ac614f7a565b60008581526002602052909250604090206144c5614f7a565b9050856144d35760006144db565b808b8a840101015b6144e58c83614bf9565b016144f0838b614bf9565b11156144fb57614594565b61450e84614509838c614e41565b612567565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b98561453b838c614e41565b60405191825260208201526040908101905180910390a188925061456389610e7c838c614e41565b9850826145708a8d614bf9565b8161457757fe5b049a508a1580614585575088155b1561458f57614594565b614418565b6000891180156145a4575060008b115b80156145cf57506001600160a01b038a166000908152600b602052604090206145cb614f7a565b8b10155b156145ec576145e08b8b8b8b6145fa565b94506145ec8588612da3565b505050509695505050505050565b600061460461235f565b1561461757600080614614614f0f565b50505b60006004614623614f7a565b906101000a900460ff16156146405760008061463d614f0f565b50505b60016004818161464e614f7a565b8160ff0219169083151502179061466361501b565b505050838261467182614e58565b61468357600080614680614f0f565b50505b61468c81614e58565b61469e5760008061469b614f0f565b50505b86876001600160801b0316146146bc576000806146b9614f0f565b50505b84856001600160801b0316146146da576000806146d7614f0f565b50505b600087116146f0576000806146ed614f0f565b50505b6001600160a01b03861661470c57600080614709614f0f565b50505b600085116147225760008061471f614f0f565b50505b6001600160a01b03841661473e5760008061473b614f0f565b50505b836001600160a01b0316866001600160a01b0316141561476657600080614763614f0f565b50505b61476e615069565b8781526001600160a01b03808816602083015260408201879052851660608201525a614798614fd5565b6001600160a01b031660808201525a6147af6150e3565b6001600160401b031660a08201526147c5614e8c565b600081815260026020529094508190604090208151816147e361501b565b50506020820151600180830190816147f9614f7a565b816001600160a01b0302191690836001600160a01b031602179061481b61501b565b50505060408201518160020161482f61501b565b5050606082015160038201600181614845614f7a565b816001600160a01b0302191690836001600160a01b031602179061486761501b565b50505060808201516004820160018161487e614f7a565b816001600160a01b0302191690836001600160a01b03160217906148a061501b565b50505060a082015160048201600160a01b816148ba614f7a565b816001600160401b0302191690836001600160401b03160217906148dc61501b565b505050905050866001600160a01b03166323b872dd5a6148fa614fd5565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561495057600082820152602001614939565b5050508b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529190921660248201526044810191909152606401602060405180830381600087806149a1615129565b1580156149b6576000806149b3614f0f565b50505b505a6149c0615175565b5050505050501580156149e0573d6000803e3d60006149dd614f0f565b50505b505050506040513d60208110156149ff576000806149fc614f0f565b50505b8101908080519250614a1c91505057600080614a19614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888460405190815260200160405180910390a15a614a58614fd5565b6001600160a01b031687866040516001600160601b0319606093841b811660208301529190921b16603482015260480160405160208183030381529060405280519060200120857f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c828a898d8c5a614acd6150e3565b6040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a45050506000600460006101000a81614b31614f7a565b8160ff02191690831515021790610f2f61501b565b6001600160a01b0383166000908152600b6020528460408220614b67614f7a565b1115614b7b57600080614b78614f0f565b50505b614b87858585856145fa565b9050600d614b93614f7a565b6000828152600c602052604090208190614bab61501b565b50505080600d8190614bbb61501b565b5050507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f8148628160405190815260200160405180910390a1949350505050565b6000811580614c1457505080820282828281614c1157fe5b04145b610d385760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640160405180910390612b16614f0f565b6000808311614c7857600080614c75614f0f565b50505b8115801590614c8d5750614c8b82611d9b565b155b15614cb2576000828152600860205260409020600101614cab614f7a565b9150614c78565b81614cc757614cc083614d54565b9050610d38565b614cd18383614eb7565b15614d155760005b8215801590614ced5750614ced8484614eb7565b15614cc0575060008281526008602052829060409020600101614d0e614f7a565b9250614cd9565b8115801590614d2b5750614d298383614eb7565b155b15614d4d576000828152600860205260409020614d46614f7a565b9150614d15565b5080610d38565b6000808211614d6b57600080614d68614f0f565b50505b6000828152600260205260408120600301600090614d87614f7a565b906101000a90046001600160a01b03169050600060026000858152602001908152602001600020600101600090614dbc614f7a565b6001600160a01b036101009290920a90041660008181526009602052909150604081206001600160a01b038416600090815260209190915260409020614e00614f7a565b905060005b8115801590614e195750614e198683614eb7565b15610fdf575060008181526008602052819060409020600101614e3a614f7a565b9150614e05565b600081831115614e515781610d35565b5090919050565b6001600160a01b0381166000908152600360205260408120600090614e7b614f7a565b906101000a900460ff169050919050565b60006001600081614e9b614f7a565b91600183019150614eaa61501b565b5050506001611853614f7a565b60008181526002602052614ee960408220600201614ed3614f7a565b6000858152600260205260409020613b2b614f7a565b60008481526002602052614f069060409020600201614ed3614f7a565b10159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015614f47578086015182820160400152602001614f2c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610fba57600082820152602001614fbe565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614fbe565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020614fbe565b60405160c081016040908152600080835260208301819052908201819052606082018190526080820181905260a082015290565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614fbe565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614fbe565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614fbe565b6385979f76598160e01b81526151a6565b8080831115610d38575090919050565b8080831015610d38575090919050565b836004820152846024820152606060448201528760648201526084810160005b898110156151de5780890151828201526020016151c6565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596152338e3d615196565b8d0161523f8187615186565b5b828110156152545760008152602001615240565b50929d50505050505050565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000",
  "deployedBytecode": "0x608060405234801561001957600080610016614f0f565b50505b50600436106103665760003560e01c80637ca9429a116101dc578063be71f5ce1161010d578063d6febde8116100ab578063f09ea2a611610085578063f09ea2a614610c28578063f46901ed14610c6d578063f582d29314610c9c578063ff1fd97414610ca457610366565b8063d6febde814610b7c578063e1a6f01414610ba8578063e43252d714610bf957610366565b8063c2d526aa116100e7578063c2d526aa14610abe578063c41a360a14610b08578063d2b420ce14610b2e578063d6f1546914610b5457610366565b8063be71f5ce14610a52578063bf7c734e14610a81578063c2b6b58c14610ab657610366565b80638da5cb5b1161017a578063943911bc11610154578063943911bc146109b8578063a128171b146109de578063a78d431614610a06578063b4f9b6c814610a2c57610366565b80638da5cb5b1461095b578063911550f41461096357806391be90c81461098957610366565b806385ee7ba6116101b657806385ee7ba61461087b5780638a72ea6a146108b25780638ab1d681146109245780638af82a2e1461095357610366565b80637ca9429a146107db5780638185402b1461081257806382afd23b1461085557610366565b806340e58ee5116102b6578063604b6a9c116102545780636b9d8c4b1161022e5780636b9d8c4b1461075257806374c1d7d31461077657806375f12b21146107ad578063779997c3146107b557610366565b8063604b6a9c146106cf57806361f54a79146106f5578063677170e11461071b57610366565b80634960645511610290578063496064551461063f578063511fa48714610674578063557ed1ba146106a357806356ad8764146106c757610366565b806340e58ee5146105995780634579268a146105bf578063467f0b7b1461061957610366565b8063144a2752116103235780631d834a1b116102fd5780631d834a1b14610535578063232cae0b146105615780632aed1905146105695780632f90a6fc1461059157610366565b8063144a2752146104a5578063158ef93e146104e45780631b33d412146104ec57610366565b806301492a0b146103745780630374fc6f146103905780630621b4f6146103d957806307da68f51461041c578063093f51981461042657806313af403514610476575b600080610371614f0f565b50505b61037c610ce3565b604051901515815260200160405180910390f35b6103c7600480360360408110156103af576000806103ac614f0f565b50505b506001600160a01b0381358116916020013516610cfc565b60405190815260200160405180910390f35b6103c7600480360360808110156103f8576000806103f5614f0f565b50505b506001600160a01b0381358116916020810135916040820135169060600135610d3e565b610424610f3b565b005b6103c76004803603608081101561044557600080610442614f0f565b50505b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610fbf565b6104246004803603602081101561049557600080610492614f0f565b50505b50356001600160a01b0316610fe8565b6103c7600480360360608110156104c4576000806104c1614f0f565b50505b506001600160a01b038135811691602081013590911690604001356110c2565b61037c6111b2565b6103c7600480360360a081101561050b57600080610508614f0f565b50505b508035906001600160a01b03602082013581169160408101359160608201351690608001356111be565b61037c6004803603604081101561055457600080610551614f0f565b50505b50803590602001356111f4565b6103c76112fa565b61037c6004803603602081101561058857600080610585614f0f565b50505b50351515611307565b61037c6113d9565b61037c600480360360208110156105b8576000806105b5614f0f565b50505b50356113e5565b6105e5600480360360208110156105de576000806105db614f0f565b50505b5035611599565b6040519384526001600160a01b03928316602085015260408085019290925290911660608301526080909101905180910390f35b61037c6004803603602081101561063857600080610635614f0f565b50505b5035611695565b6104246004803603604081101561065e5760008061065b614f0f565b50505b50803590602001356001600160801b03166117ff565b6103c76004803603602081101561069357600080610690614f0f565b50505b50356001600160a01b0316611828565b6106ab611848565b6040516001600160401b03909116815260200160405180910390f35b6103c7611858565b61037c600480360360208110156106ee576000806106eb614f0f565b50505b5035611862565b6103c76004803603602081101561071457600080610711614f0f565b50505b50356118ce565b6103c76004803603604081101561073a57600080610737614f0f565b50505b506001600160a01b03813581169160200135166118e4565b61075a61190a565b6040516001600160a01b03909116815260200160405180910390f35b6103c76004803603604081101561079557600080610792614f0f565b50505b506001600160a01b0381358116916020013516611929565b61037c61194f565b610424600480360360208110156107d4576000806107d1614f0f565b50505b503561195b565b6103c7600480360360408110156107fa576000806107f7614f0f565b50505b506001600160a01b0381358116916020013516611b9a565b6103c7600480360360808110156108315760008061082e614f0f565b50505b506001600160a01b0381358116916020810135916040820135169060600135611bd3565b61037c6004803603602081101561087457600080610871614f0f565b50505b5035611d9b565b6104246004803603604081101561089a57600080610897614f0f565b50505b508035151590602001356001600160a01b0316611dd1565b6108d8600480360360208110156108d1576000806108ce614f0f565b50505b5035611f59565b6040519586526001600160a01b039485166020870152604080870194909452918416606086015290921660808401526001600160401b0390911660a083015260c0909101905180910390f35b6104246004803603602081101561094357600080610940614f0f565b50505b50356001600160a01b0316612002565b6103c761208d565b61075a612099565b6103c7600480360360208110156109825760008061097f614f0f565b50505b50356120a4565b6103c7600480360360208110156109a8576000806109a5614f0f565b50505b50356001600160a01b03166120ba565b6103c7600480360360208110156109d7576000806109d4614f0f565b50505b50356120d2565b61037c600480360360208110156109fd576000806109fa614f0f565b50505b503515156120eb565b6103c760048036036020811015610a2557600080610a22614f0f565b50505b5035612166565b61042460048036036020811015610a4b57600080610a48614f0f565b50505b503561217e565b61037c60048036036020811015610a7157600080610a6e614f0f565b50505b50356001600160a01b0316612199565b61037c60048036036040811015610aa057600080610a9d614f0f565b50505b506001600160a01b03813516906020013561221e565b61037c61235f565b610ae460048036036020811015610add57600080610ada614f0f565b50505b5035612364565b60405180848152602001838152602001828152602001935050505060405180910390f35b61075a60048036036020811015610b2757600080610b24614f0f565b50505b503561239c565b61037c60048036036020811015610b4d57600080610b4a614f0f565b50505b50356123cf565b61037c60048036036020811015610b7357600080610b70614f0f565b50505b503515156124bb565b61037c60048036036040811015610b9b57600080610b98614f0f565b50505b5080359060200135612567565b6103c7600480360360c0811015610bc757600080610bc4614f0f565b50505b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515612741565b61042460048036036020811015610c1857600080610c15614f0f565b50505b50356001600160a01b0316612840565b6103c760048036036080811015610c4757600080610c44614f0f565b50505b508035906001600160a01b036020820135811691604081013591606090910135166128b9565b61037c60048036036020811015610c8c57600080610c89614f0f565b50505b50356001600160a01b031661295a565b61037c6129bd565b6103c760048036036060811015610cc357600080610cc0614f0f565b50505b506001600160a01b038135811691602081013590911690604001356129c9565b60166006610cef614f7a565b906101000a900460ff1681565b6001600160a01b03821660009081526009602052604081206001600160a01b038316600090815260209190915260409020610d35614f7a565b90505b92915050565b6000806004610d4b614f7a565b906101000a900460ff1615610da45760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390610da1614f0f565b50505b60005b8415610f1c57610db78487610cfc565b905080610dcc57600080610dc9614f0f565b50505b60008181526002602052610e049060409020600201610de9614f7a565b6000838152600260205260409020610dff614f7a565b612a93565b85670de0b6b3a7640000021015610e1a57610f1c565b6000818152600260205260409020600201610e33614f7a565b8510610eaa5760008181526002602052610e5a90839060409020610e55614f7a565b612ac2565b60008281526002602052909250610e8190869060409020600201610e7c614f7a565b612b1e565b60008281526002602052909550610ea590829060409020610ea0614f7a565b6117ff565b610f17565b60008181526002602052633b9aca00610ef1878202610eec60408520610ece614f7a565b6000878152600260205260409020600201610ee7614f7a565b612b73565b612b8f565b81610ef857fe5b049050610f058382612ac2565b9250610f1182826117ff565b60009550505b610da7565b82821015610f3257600080610f2f614f0f565b50505b50949350505050565b610f4c5a610f47614fd5565b612bbf565b610f935760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390610f90614f0f565b50505b60016006600160a01b81610fa5614f7a565b8160ff02191690831515021790610fba61501b565b505050565b6000610fdf836001600160801b031686846001600160801b0316876128b9565b95945050505050565b610ff45a610f47614fd5565b61103b5760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390611038614f0f565b50505b806000600181611049614f7a565b816001600160a01b0302191690836001600160a01b031602179061106b61501b565b5050506000809061107a614f7a565b906101000a90046001600160a01b03166001600160a01b03167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b6000806110cf8585610cfc565b90505b60008181526002602052604090206002016110eb614f7a565b83111561115b576000818152600260205261110e90839060409020610e55614f7a565b6000828152600260205290925061113090849060409020600201610e7c614f7a565b9250821561115657611141816120d2565b90508061115657600080611153614f0f565b50505b6110d2565b610fdf82633b9aca006111a586633b9aca0002610eec6002600088815260200190815260200160002061118c614f7a565b6000888152600260205260409020600201610ee7614f7a565b816111ac57fe5b04612ac2565b60176006610cef614f7a565b60006111c861235f565b156111db576000806111d8614f0f565b50505b6111ea86868686866001612741565b9695505050505050565b6000806004611201614f7a565b906101000a900460ff161561125a5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611257614f0f565b50505b611263836123cf565b1561127657600080611273614f0f565b50505b61127f83611d9b565b6112915760008061128e614f0f565b50505b61129a83612c7f565b506112a58383612da3565b7f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d2839405a6112cf614fd5565b846040516001600160a01b03909216825260208201526040908101905180910390a150600192915050565b6001611304614f7a565b81565b60006113155a610f47614fd5565b61135c5760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390611359614f0f565b50505b816006600160b01b8161136d614f7a565b8160ff0219169083151502179061138261501b565b5050507fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d960066016906113b3614f7a565b906101000a900460ff16604051901515815260200160405180910390a15060015b919050565b60186006610cef614f7a565b6000816113f181611d9b565b6114355760405162461bcd60e51b815260040180806020018281038252602d815260200180615296602d913960400191505060405180910390611432614f0f565b50505b61143d61235f565b80611469575061144c8161239c565b6001600160a01b03165a61145e614fd5565b6001600160a01b0316145b8061147c5750600e611479614f7a565b81145b6114c05760405162461bcd60e51b81526004018080602001828103825260748152602001806152c360749139608001915050604051809103906114bd614f0f565b50505b600060046114cc614f7a565b906101000a900460ff16156115255760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611522614f0f565b50505b60166006611531614f7a565b906101000a900460ff161561158957611549836123cf565b1561156e5761155783613095565b61156957600080611566614f0f565b50505b611589565b61157783612c7f565b61158957600080611586614f0f565b50505b611592836133d1565b9392505050565b6000806000806115a7615069565b600086815260026020526040902060405160c081016040529081816115ca614f7a565b81526020016000600183016115dd614f7a565b6001600160a01b036101009290920a900416815260200160028201611600614f7a565b8152602001600060038301611613614f7a565b6001600160a01b036101009290920a9004168152602001600060048301611638614f7a565b6001600160a01b036101009290920a900416815260200160146004830161165d614f7a565b6001600160401b036101009290920a900416905250905080518160200151826040015183606001519450945094509450509193509193565b60008060046116a2614f7a565b906101000a900460ff16156116fb5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b6044820152606401604051809103906116f8614f0f565b50505b61170482611d9b565b15801561172857506000828152600860205260409020600201611725614f7a565b15155b80156117595750600a5a61173a61509d565b600084815260086020529190039060409020600201611757614f7a565b105b61176b57600080611768614f0f565b50505b60008281526008602052604090206000808261178561501b565b50506001820160009061179661501b565b5050600282016000906117a761501b565b505050507fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c5a6117d5614fd5565b836040516001600160a01b03909216825260208201526040908101905180910390a1506001919050565b611812826001600160801b038316612567565b61182457600080611821614f0f565b50505b5050565b6001600160a01b0381166000908152600b60205260408120610d38614f7a565b60005a6118536150e3565b905090565b600e611304614f7a565b60006118705a610f47614fd5565b6118b75760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906118b4614f0f565b50505b818060056118c361501b565b506001949350505050565b6000818152600c60205260408120610d38614f7a565b600a60205281600052604060002060205280600052604060002091506113049050614f7a565b60006007611916614f7a565b906101000a90046001600160a01b031681565b600960205281600052604060002060205280600052604060002091506113049050614f7a565b60146006610cef614f7a565b8061196581611d9b565b61197757600080611974614f0f565b50505b61197f61235f565b156119925760008061198f614f0f565b50505b600082815260026020528290604090206004016000906119b0614f7a565b906101000a90046001600160a01b03166001600160a01b0316600260008381526020019081526020016000206001016000906119ea614f7a565b906101000a90046001600160a01b031660026000848152602001908152602001600020600301600090611a1b614f7a565b906101000a90046001600160a01b03166040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001206000838152600260205285907f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a29060409020600101600090611aa6614f7a565b906101000a90046001600160a01b031660026000878152602001908152602001600020600301600090611ad7614f7a565b906101000a90046001600160a01b031660026000888152602001908152602001600020611b02614f7a565b6000888152600260205260409020600201611b1b614f7a565b6000898152600260205260409020600401601490611b37614f7a565b906101000a90046001600160401b03166040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a4505050565b6001600160a01b0382166000908152600a602052604081206001600160a01b038316600090815260209190915260409020610d35614f7a565b6000806004611be0614f7a565b906101000a900460ff1615611c395760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390611c36614f0f565b50505b60005b8415611d8857611c4c8685610cfc565b905080611c6157600080611c5e614f0f565b50505b60008181526002602052611c949060409020611c7b614f7a565b6000838152600260205260409020600201610dff614f7a565b85670de0b6b3a7640000021015611caa57611d88565b6000818152600260205260409020611cc0614f7a565b8510611d285760008181526002602052611ce590839060409020600201610e55614f7a565b60008281526002602052909250611d0490869060409020610e7c614f7a565b60008281526002602052909550611d2390829060409020610ea0614f7a565b611d83565b611d7282633b9aca006111a588633b9aca0002610eec60026000888152602001908152602001600020600201611d5c614f7a565b6000888152600260205260409020610ee7614f7a565b9150611d7e81866117ff565b600094505b611c3c565b82821115610f3257600080610f2f614f0f565b600081815260026020528060408120600401601490611db8614f7a565b6001600160401b036101009290920a9004161192915050565b60176006611ddd614f7a565b906101000a900460ff1615611e415760405162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015260640160405180910390611e3e614f0f565b50505b816006600160c01b81611e52614f7a565b8160ff02191690831515021790611e6761501b565b50505080600660006101000a81611e7c614f7a565b816001600160a01b0302191690836001600160a01b0316021790611e9e61501b565b5050505a611eaa614fd5565b6000600181611eb7614f7a565b816001600160a01b0302191690836001600160a01b0316021790611ed961501b565b5050505a611ee5614fd5565b6001600160a01b03167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a26014806005611f2761501b565b5050506001600660176101000a81611f3d614f7a565b8160ff02191690831515021790611f5261501b565b5050505050565b6002602052806000526040600020905080611f72614f7a565b90600060018201611f81614f7a565b906101000a90046001600160a01b03169080600201611f9e614f7a565b90600060038201611fad614f7a565b906101000a90046001600160a01b03169080600401600090611fcd614f7a565b906101000a90046001600160a01b03169080600401601490611fed614f7a565b906101000a90046001600160401b0316905086565b61200e5a610f47614fd5565b6120555760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612052614f0f565b50505b6001600160a01b0381166000908152600360205260408120600181612078614f7a565b8160ff0219169083151502179061182161501b565b6000600d611853614f7a565b600080611916614f7a565b6000818152600860205260408120610d38614f7a565b600b6020528060005260406000209050611304614f7a565b6000818152600860205260408120600101610d38614f7a565b60006120f95a610f47614fd5565b6121405760405162461bcd60e51b8152602060048201526014602482015260008051602061539983398151915260448201526064016040518091039061213d614f0f565b50505b816006600160c01b81612151614f7a565b8160ff021916908315150217906118c361501b565b600c6020528060005260406000209050611304614f7a565b612187816113e5565b61219657600080610fba614f0f565b50565b60006121a75a610f47614fd5565b6121ee5760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906121eb614f0f565b50505b8160076001816121fc614f7a565b816001600160a01b0302191690836001600160a01b03160217906118c361501b565b600061222c5a610f47614fd5565b6122735760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612270614f0f565b50505b6004356024353481835a612285614fd5565b6001600160a01b03166000356001600160e01b0319166001600160e01b0319168460003660405183815260406020820181815290820183905260608201848480828437600083820152601f01601f1916909101955060409450505050505180910390a46001600160a01b0386166000908152600b602052859060409020819061230c61501b565b5050507fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d086866040516001600160a01b03909216825260208201526040908101905180910390a150600195945050505050565b600090565b600860205280600052604060002090508061237d614f7a565b908060010161238a614f7a565b9080600201612397614f7a565b905083565b60008181526002602052604081206004016000906123b8614f7a565b906101000a90046001600160a01b03169050919050565b60008181526008602052604081206123e5614f7a565b15158061240957506000828152600860205260409020600101612406614f7a565b15155b80610d38575060008281526002602052829060099060408120600101600090612430614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600084815260026020526040812060030160009061247c614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000206124b4614f7a565b1492915050565b60006124c95a610f47614fd5565b6125105760405162461bcd60e51b8152602060048201526014602482015260008051602061539983398151915260448201526064016040518091039061250d614f0f565b50505b816006600160a81b81612521614f7a565b8160ff0219169083151502179061253661501b565b5050507f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c160066015906113b3614f7a565b60008261257381611d9b565b61258557600080612582614f0f565b50505b61258d61235f565b156125a05760008061259d614f0f565b50505b600060046125ac614f7a565b906101000a900460ff16156126055760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015260640160405180910390612602614f0f565b50505b60186006612611614f7a565b906101000a900460ff1615612708576000600761262c614f7a565b906101000a90046001600160a01b03166001600160a01b031663b30ed7b36126538661239c565b5a61265c614fd5565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000878061269f615129565b1580156126b4576000806126b1614f0f565b50505b505a6126be615175565b5050505050501580156126de573d6000803e3d60006126db614f0f565b50505b505050506040513d60208110156126fd576000806126fa614f0f565b50505b810190808051505050505b61526060166006612717614f7a565b906101000a900460ff1661272d576138b2612731565b6142dd5b9050610fdf85858363ffffffff16565b600061274b61235f565b1561275e5760008061275b614f0f565b50505b6000600461276a614f7a565b906101000a900460ff16156127c35760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b6044820152606401604051809103906127c0614f0f565b50505b6001600160a01b0386166000908152600b6020528790604090206127e5614f7a565b11156127f9576000806127f6614f0f565b50505b60166006612805614f7a565b906101000a900460ff16156128295761282287878787878761440f565b90506111ea565b612835878787876145fa565b979650505050505050565b61284c5a610f47614fd5565b6128935760405162461bcd60e51b81526020600482015260146024820152600080516020615399833981519152604482015260640160405180910390612890614f0f565b50505b6001600160a01b0381166000908152600360205260019060409020600181612078614f7a565b60008060046128c6614f7a565b906101000a900460ff161561291f5760405162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b60448201526064016040518091039061291c614f0f565b50505b6152606016600661292e614f7a565b906101000a900460ff16612944576145fa612948565b614b465b90506111ea868686868563ffffffff16565b60006129685a610f47614fd5565b6129af5760405162461bcd60e51b815260206004820152601460248201526000805160206153998339815191526044820152606401604051809103906129ac614f0f565b50505b8160066001816121fc614f7a565b60156006610cef614f7a565b6000806129d68486610cfc565b90505b60008181526002602052604090206129ef614f7a565b831115612a5f5760008181526002602052612a1590839060409020600201610e55614f7a565b60008281526002602052909250612a3490849060409020610e7c614f7a565b92508215612a5a57612a45816120d2565b905080612a5a57600080612a57614f0f565b50505b6129d9565b610fdf82633b9aca006111a586633b9aca0002610eec60026000888152602001908152602001600020600201611d5c614f7a565b600081612ab3612aab85670de0b6b3a7640000614bf9565b6002856111ac565b81612aba57fe5b049392505050565b80820182811015610d385760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640160405180910390612b16614f0f565b505092915050565b80820382811115610d385760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640160405180910390612b16614f0f565b600081612ab3612aab856b033b2e3c9fd0803ce8000000614bf9565b60006b033b2e3c9fd0803ce8000000612ab3612bab8585614bf9565b60026b033b2e3c9fd0803ce80000006111ac565b60005a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015612c1757600082820152602001612c00565b5050506001600160a01b0316826001600160a01b03161415612c3b575060016113d4565b600080612c46614f7a565b906101000a90046001600160a01b03166001600160a01b0316826001600160a01b03161415612c77575060016113d4565b5060006113d4565b600080600d612c8c614f7a565b905080612c98846123cf565b15612cab57600080612ca8614f0f565b50505b83600d612cb6614f7a565b1415612d06576000848152600c60205260409020612cd2614f7a565b80600d612cdd61501b565b5050506000848152600c602052604081208190612cf861501b565b5050506001925050506113d4565b600082118015612d165750838214155b15612d3b57506000818152600c602052819060409020612d34614f7a565b9150612d06565b838214612d4d576000925050506113d4565b6000848152600c60205260409020612d63614f7a565b6000828152600c602052604090208190612d7b61501b565b5050506000848152600c602052604081208190612d9661501b565b5060019695505050505050565b612dac82611d9b565b612dbe57600080612dbb614f0f565b50505b6000828152600260205260408120600301600090612dda614f7a565b906101000a90046001600160a01b03169050600060026000858152602001908152602001600020600101600090612e0f614f7a565b906101000a90046001600160a01b0316905060008360001480612e705750600084815260026020526001600160a01b0383169060409020600101600090612e54614f7a565b906101000a90046001600160a01b03166001600160a01b031614155b80612eb95750600084815260026020526001600160a01b0384169060409020600301600090612e9d614f7a565b906101000a90046001600160a01b03166001600160a01b031614155b80612eca5750612ec8846123cf565b155b612edd57612ed88585614c61565b612ee6565b612ee685614d54565b93508315612f4c576000848152600860205260409020600101612f07614f7a565b600085815260086020529091508590604090206001018190612f2761501b565b505050600085815260086020528490604090208190612f4461501b565b505050612fc9565b6001600160a01b03821660009081526009602052604090206001600160a01b038416600090815260209190915260409020612f85614f7a565b6001600160a01b038316600090815260096020529091508590604090206001600160a01b0385166000908152602091909152604090208190612fc561501b565b5050505b801561300d57600081815260086020528590604090208190612fe961501b565b50505060008581526008602052819060409020600101819061300961501b565b5050505b6001600160a01b0382166000908152600a602052604090206001600160a01b038416600090815260209190915260409020600081613049614f7a565b9160018301915061305861501b565b5050507f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd8560405190815260200160405180910390a15050505050565b6000818152600260205280604081206003016000906130b2614f7a565b906101000a90046001600160a01b031690506000600260008581526020019081526020016000206001016000906130e7614f7a565b6001600160a01b036101009290920a9004166000818152600a602052909150604081206001600160a01b03841660009081526020919091526040902061312b614f7a565b1161313e5760008061313b614f0f565b50505b6000848152600860205260409020600201613157614f7a565b1580156131685750613168846123cf565b61317a57600080613177614f0f565b50505b6001600160a01b03811660009081526009602052604090206001600160a01b0383166000908152602091909152604090206131b3614f7a565b8414613254576000848152600860208190528591604081206131d3614f7a565b81526020019081526020016000206001016131ec614f7a565b146131ff576000806131fc614f0f565b50505b6000848152600860205260409020600101613218614f7a565b6000858152600860208190529060408120613231614f7a565b8152602001908152602001600020600101819061324c61501b565b5050506132ac565b600084815260086020526040902060010161326d614f7a565b6001600160a01b03821660009081526009602052604090206001600160a01b03841660009081526020919091526040902081906132a861501b565b5050505b60008481526008602052604090206001016132c5614f7a565b1561335e576000848152600860208190528591604081206001016132e7614f7a565b81526020019081526020016000206132fd614f7a565b146133105760008061330d614f0f565b50505b6000848152600860205260409020613326614f7a565b6000858152600860208190529060408120600101613342614f7a565b8152602001908152602001600020819061335a61501b565b5050505b6001600160a01b0381166000908152600a602052604090206001600160a01b03831660009081526020919091526040902060008161339a614f7a565b91600019830191506133aa61501b565b5050505a6133b661509d565b60008581526008602052604090206002018190612d9661501b565b6000816133dd81611d9b565b6134215760405162461bcd60e51b815260040180806020018281038252602d815260200180615296602d91396040019150506040518091039061341e614f0f565b50505b61342961235f565b8061345557506134388161239c565b6001600160a01b03165a61344a614fd5565b6001600160a01b0316145b806134685750600e613465614f7a565b81145b6134ac5760405162461bcd60e51b81526004018080602001828103825260748152602001806152c360749139608001915050604051809103906134a9614f0f565b50505b600060046134b8614f7a565b906101000a900460ff16156134d5576000806134d2614f0f565b50505b6001600481816134e3614f7a565b8160ff021916908315150217906134f861501b565b505050613503615069565b600084815260026020526040902060405160c08101604052908181613526614f7a565b8152602001600060018301613539614f7a565b6001600160a01b036101009290920a90041681526020016002820161355c614f7a565b815260200160006003830161356f614f7a565b6001600160a01b036101009290920a9004168152602001600060048301613594614f7a565b6001600160a01b036101009290920a90041681526020016014600483016135b9614f7a565b6001600160401b036101009290920a9004169052506000858152600260205290915060409020600080826135eb61501b565b5050600182810190816135fc614f7a565b906001600160a01b030219169061361161501b565b50506002820160009061362261501b565b505060038201600181613633614f7a565b906001600160a01b030219169061364861501b565b505060048201600181613659614f7a565b906001600160a01b030219169061366e61501b565b505060048201600160a01b81613682614f7a565b906001600160401b030219169061369761501b565b5050505080602001516001600160a01b031663a9059cbb826080015183516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087806136f6615129565b15801561370b57600080613708614f0f565b50505b505a613715615175565b505050505050158015613735573d6000803e3d6000613732614f0f565b50505b505050506040513d602081101561375457600080613751614f0f565b50505b81019080805192506137719150505760008061376e614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888460405190815260200160405180910390a180608001516001600160a01b0316816020015182606001516040516001600160601b0319606093841b811660208301529190921b16603482015260480160405160208183030381529060405280519060200120857f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b481999560208501518560600151865187604001515a6138336150e3565b6040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a45060019150600060048381613894614f7a565b8160ff021916908315150217906138a961501b565b50505050919050565b6000826138be81611d9b565b6138d0576000806138cd614f0f565b50505b6138d861235f565b156138eb576000806138e8614f0f565b50505b600060046138f7614f7a565b906101000a900460ff161561391457600080613911614f0f565b50505b600160048181613922614f7a565b8160ff0219169083151502179061393761501b565b505050613942615069565b600085815260026020526040902060405160c08101604052908181613965614f7a565b8152602001600060018301613978614f7a565b6001600160a01b036101009290920a90041681526020016002820161399b614f7a565b81526020016000600383016139ae614f7a565b6001600160a01b036101009290920a90041681526020016000600483016139d3614f7a565b6001600160a01b036101009290920a90041681526020016014600483016139f8614f7a565b6001600160401b036101009290920a900416905250905060008151613a21868460400151614bf9565b81613a2857fe5b04905080816001600160801b031614613a865760405162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015260640160405180910390613a83614f0f565b50505b84856001600160801b031614613ae45760405162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015260640160405180910390613ae1614f0f565b50505b841580613aef575080155b80613afa5750815185115b80613b085750816040015181115b15613b18576000935050506142af565b6000612710613b30836005613b2b614f7a565b614bf9565b81613b3757fe5b04905082606001516001600160a01b03166323b872dd5a613b56614fd5565b60006006613b62614f7a565b906101000a90046001600160a01b0316846040516001600160e01b031960e086901b1681526001600160a01b039384166004820152919092166024820152604481019190915260640160206040518083038160008780613bc0615129565b158015613bd557600080613bd2614f0f565b50505b505a613bdf615175565b505050505050158015613bff573d6000803e3d6000613bfc614f0f565b50505b505050506040513d6020811015613c1e57600080613c1b614f0f565b50505b8101908080519250613c829150505760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015260640160405180910390613c7f614f0f565b50505b613c8d835187612b1e565b60008881526002602052604090208190613ca561501b565b505050613cb6836040015183612b1e565b60008881526002602052604090206002018190613cd161501b565b50505082606001516001600160a01b03166323b872dd5a613cf0614fd5565b8560800151856040516001600160e01b031960e086901b1681526001600160a01b039384166004820152919092166024820152604481019190915260640160206040518083038160008780613d43615129565b158015613d5857600080613d55614f0f565b50505b505a613d62615175565b505050505050158015613d82573d6000803e3d6000613d7f614f0f565b50505b505050506040513d6020811015613da157600080613d9e614f0f565b50505b8101908080519250613df09150505760405162461bcd60e51b81526004018080602001828103825260628152602001806153376062913960800191505060405180910390613ded614f0f565b50505b82602001516001600160a01b031663a9059cbb5a613e0c614fd5565b886040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780613e4e615129565b158015613e6357600080613e60614f0f565b50505b505a613e6d615175565b505050505050158015613e8d573d6000803e3d6000613e8a614f0f565b50505b505050506040513d6020811015613eac57600080613ea9614f0f565b50505b8101908080519250613efb9150505760405162461bcd60e51b81526004018080602001828103825260338152602001806152636033913960400191505060405180910390613ef8614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888760405190815260200160405180910390a15a613f37614fd5565b6001600160a01b031683608001516001600160a01b0316846020015185606001516040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001207f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f8a602088015188606001518c895a613fca6150e3565b6040519586526001600160a01b039485166020870152929093166040808601919091526001600160801b039182166060860152921660808401526001600160401b031660a083015260c0909101905180910390a45a614027614fd5565b6001600160a01b031683608001516001600160a01b0316846020015185606001516040516001600160601b0319606093841b811660208301529190921b166034820152604801604051602081830303815290604052805190602001207f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e28a602088015188606001518c8989600060066140be614f7a565b906101000a90046001600160a01b03165a6140d76150e3565b6040519788526001600160a01b0396871660208901529486166040808901919091526001600160801b03948516606089015292909316608087015260a0860152921660c08401526001600160401b031660e0830152610100909101905180910390a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd2443875888560405191825260208201526040908101905180910390a360008781526002602052604090206141a5614f7a565b6142a7576000878152600260205260409020600080826141c361501b565b5050600182810190816141d4614f7a565b906001600160a01b03021916906141e961501b565b5050600282016000906141fa61501b565b50506003820160018161420b614f7a565b906001600160a01b030219169061422061501b565b505060048201600181614231614f7a565b906001600160a01b030219169061424661501b565b505060048201600160a01b8161425a614f7a565b906001600160401b030219169061426f61501b565b505050507f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def556768760405190815260200160405180910390a15b600194505050505b600060046001816142be614f7a565b8160ff021916908315150217906142d361501b565b5050505092915050565b6000601560066142eb614f7a565b906101000a900460ff1661430757600080614304614f0f565b50505b600083815260026020526040902061431d614f7a565b82141561434c5761432d836123cf565b156143415761433b83613095565b5061434c565b61434a83612c7f565b505b61435683836138b2565b61436857600080614365614f0f565b50505b61437183611d9b565b80156143e7575060008381526002602052600b9060408120600101600090614397614f7a565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000206143cf614f7a565b60008481526002602052604090206143e5614f7a565b105b15614406578280600e6143f861501b565b505050614404836113e5565b505b50600192915050565b60008060008060005b6001600160a01b03881660009081526009602052604081206001600160a01b038c16600090815260209190915260409020614451614f7a565b1115614594576001600160a01b03881660009081526009602052604090206001600160a01b038b16600090815260209190915260409020614490614f7a565b60008181526002602052909450604090206002016144ac614f7a565b60008581526002602052909250604090206144c5614f7a565b9050856144d35760006144db565b808b8a840101015b6144e58c83614bf9565b016144f0838b614bf9565b11156144fb57614594565b61450e84614509838c614e41565b612567565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b98561453b838c614e41565b60405191825260208201526040908101905180910390a188925061456389610e7c838c614e41565b9850826145708a8d614bf9565b8161457757fe5b049a508a1580614585575088155b1561458f57614594565b614418565b6000891180156145a4575060008b115b80156145cf57506001600160a01b038a166000908152600b602052604090206145cb614f7a565b8b10155b156145ec576145e08b8b8b8b6145fa565b94506145ec8588612da3565b505050509695505050505050565b600061460461235f565b1561461757600080614614614f0f565b50505b60006004614623614f7a565b906101000a900460ff16156146405760008061463d614f0f565b50505b60016004818161464e614f7a565b8160ff0219169083151502179061466361501b565b505050838261467182614e58565b61468357600080614680614f0f565b50505b61468c81614e58565b61469e5760008061469b614f0f565b50505b86876001600160801b0316146146bc576000806146b9614f0f565b50505b84856001600160801b0316146146da576000806146d7614f0f565b50505b600087116146f0576000806146ed614f0f565b50505b6001600160a01b03861661470c57600080614709614f0f565b50505b600085116147225760008061471f614f0f565b50505b6001600160a01b03841661473e5760008061473b614f0f565b50505b836001600160a01b0316866001600160a01b0316141561476657600080614763614f0f565b50505b61476e615069565b8781526001600160a01b03808816602083015260408201879052851660608201525a614798614fd5565b6001600160a01b031660808201525a6147af6150e3565b6001600160401b031660a08201526147c5614e8c565b600081815260026020529094508190604090208151816147e361501b565b50506020820151600180830190816147f9614f7a565b816001600160a01b0302191690836001600160a01b031602179061481b61501b565b50505060408201518160020161482f61501b565b5050606082015160038201600181614845614f7a565b816001600160a01b0302191690836001600160a01b031602179061486761501b565b50505060808201516004820160018161487e614f7a565b816001600160a01b0302191690836001600160a01b03160217906148a061501b565b50505060a082015160048201600160a01b816148ba614f7a565b816001600160401b0302191690836001600160401b03160217906148dc61501b565b505050905050866001600160a01b03166323b872dd5a6148fa614fd5565b5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561495057600082820152602001614939565b5050508b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529190921660248201526044810191909152606401602060405180830381600087806149a1615129565b1580156149b6576000806149b3614f0f565b50505b505a6149c0615175565b5050505050501580156149e0573d6000803e3d60006149dd614f0f565b50505b505050506040513d60208110156149ff576000806149fc614f0f565b50505b8101908080519250614a1c91505057600080614a19614f0f565b50505b7fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34888460405190815260200160405180910390a15a614a58614fd5565b6001600160a01b031687866040516001600160601b0319606093841b811660208301529190921b16603482015260480160405160208183030381529060405280519060200120857f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c828a898d8c5a614acd6150e3565b6040516001600160a01b0395861681529390941660208401526001600160801b03918216604080850191909152911660608301526001600160401b03909216608082015260a001905180910390a45050506000600460006101000a81614b31614f7a565b8160ff02191690831515021790610f2f61501b565b6001600160a01b0383166000908152600b6020528460408220614b67614f7a565b1115614b7b57600080614b78614f0f565b50505b614b87858585856145fa565b9050600d614b93614f7a565b6000828152600c602052604090208190614bab61501b565b50505080600d8190614bbb61501b565b5050507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f8148628160405190815260200160405180910390a1949350505050565b6000811580614c1457505080820282828281614c1157fe5b04145b610d385760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640160405180910390612b16614f0f565b6000808311614c7857600080614c75614f0f565b50505b8115801590614c8d5750614c8b82611d9b565b155b15614cb2576000828152600860205260409020600101614cab614f7a565b9150614c78565b81614cc757614cc083614d54565b9050610d38565b614cd18383614eb7565b15614d155760005b8215801590614ced5750614ced8484614eb7565b15614cc0575060008281526008602052829060409020600101614d0e614f7a565b9250614cd9565b8115801590614d2b5750614d298383614eb7565b155b15614d4d576000828152600860205260409020614d46614f7a565b9150614d15565b5080610d38565b6000808211614d6b57600080614d68614f0f565b50505b6000828152600260205260408120600301600090614d87614f7a565b906101000a90046001600160a01b03169050600060026000858152602001908152602001600020600101600090614dbc614f7a565b6001600160a01b036101009290920a90041660008181526009602052909150604081206001600160a01b038416600090815260209190915260409020614e00614f7a565b905060005b8115801590614e195750614e198683614eb7565b15610fdf575060008181526008602052819060409020600101614e3a614f7a565b9150614e05565b600081831115614e515781610d35565b5090919050565b6001600160a01b0381166000908152600360205260408120600090614e7b614f7a565b906101000a900460ff169050919050565b60006001600081614e9b614f7a565b91600183019150614eaa61501b565b5050506001611853614f7a565b60008181526002602052614ee960408220600201614ed3614f7a565b6000858152600260205260409020613b2b614f7a565b60008481526002602052614f069060409020600201614ed3614f7a565b10159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015614f47578086015182820160400152602001614f2c565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b6040811015610fba57600082820152602001614fbe565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614fbe565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52600081526020614fbe565b60405160c081016040908152600080835260208301819052908201819052606082018190526080820181905260a082015290565b635a98c361598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614fbe565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614fbe565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614fbe565b6385979f76598160e01b81526151a6565b8080831115610d38575090919050565b8080831015610d38575090919050565b836004820152846024820152606060448201528760648201526084810160005b898110156151de5780890151828201526020016151c6565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af150596152338e3d615196565b8d0161523f8187615186565b5b828110156152545760008152602001615240565b50929d50505050505050565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000",
  "devdoc": {
    "details": "This contract inherits the key trading functionality from SimpleMarket",
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "bump(bytes32)": {
        "notice": "Below are the main public entrypoints"
      }
    },
    "notice": "The core Rubicon Market smart contractThis contract is based on the original open-source work done by OasisDEX under the Apache License 2.0"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 552,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "last_offer_id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 556,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "offers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(OfferInfo)579_storage)"
      },
      {
        "astId": 560,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "whitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 562,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "locked",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 564,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "feeBPS",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "feeTo",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1351,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "stopped",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1524,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "buyEnabled",
        "offset": 21,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1527,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "matchingEnabled",
        "offset": 22,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1529,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "initialized",
        "offset": 23,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1531,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "AqueductDistributionLive",
        "offset": 24,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1533,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "AqueductAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1544,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_rank",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(sortInfo)1540_storage)"
      },
      {
        "astId": 1550,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_best",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1556,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_span",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1560,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_dust",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1564,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_near",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1566,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "_head",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1568,
        "contract": "contracts/RubiconMarket.sol:RubiconMarket",
        "label": "dustId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)423": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(OfferInfo)579_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SimpleMarket.OfferInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferInfo)579_storage"
      },
      "t_mapping(t_uint256,t_struct(sortInfo)1540_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RubiconMarket.sortInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(sortInfo)1540_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(OfferInfo)579_storage": {
        "encoding": "inplace",
        "label": "struct SimpleMarket.OfferInfo",
        "members": [
          {
            "astId": 568,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "pay_amt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 570,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "pay_gem",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ERC20)423"
          },
          {
            "astId": 572,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "buy_amt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 574,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "buy_gem",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(ERC20)423"
          },
          {
            "astId": 576,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 578,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "timestamp",
            "offset": 20,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(sortInfo)1540_storage": {
        "encoding": "inplace",
        "label": "struct RubiconMarket.sortInfo",
        "members": [
          {
            "astId": 1535,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1537,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "prev",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1539,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "delb",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}